
RFM95-STM32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003628  08003628  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003630  08003630  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000078  080036b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080036b0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000708e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192f  00000000  00000000  0002712f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00028a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  00029258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017625  00000000  00000000  00029968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009215  00000000  00000000  00040f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082946  00000000  00000000  0004a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  000ccb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003580 	.word	0x08003580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003580 	.word	0x08003580

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b976 	b.w	8000454 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	4688      	mov	r8, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14d      	bne.n	800022c <__udivmoddi4+0xac>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d968      	bls.n	8000268 <__udivmoddi4+0xe8>
 8000196:	fab2 f282 	clz	r2, r2
 800019a:	b152      	cbz	r2, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa01 f302 	lsl.w	r3, r1, r2
 80001a0:	f1c2 0120 	rsb	r1, r2, #32
 80001a4:	fa20 f101 	lsr.w	r1, r0, r1
 80001a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ac:	ea41 0803 	orr.w	r8, r1, r3
 80001b0:	4094      	lsls	r4, r2
 80001b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ba:	fa1f fe8c 	uxth.w	lr, ip
 80001be:	fb01 8817 	mls	r8, r1, r7, r8
 80001c2:	fb07 f00e 	mul.w	r0, r7, lr
 80001c6:	0c23      	lsrs	r3, r4, #16
 80001c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001cc:	4298      	cmp	r0, r3
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0303 	adds.w	r3, ip, r3
 80001d4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001d8:	f080 811e 	bcs.w	8000418 <__udivmoddi4+0x298>
 80001dc:	4298      	cmp	r0, r3
 80001de:	f240 811b 	bls.w	8000418 <__udivmoddi4+0x298>
 80001e2:	3f02      	subs	r7, #2
 80001e4:	4463      	add	r3, ip
 80001e6:	1a1b      	subs	r3, r3, r0
 80001e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001ec:	fb01 3310 	mls	r3, r1, r0, r3
 80001f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001fa:	45a6      	cmp	lr, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 33ff 	add.w	r3, r0, #4294967295
 8000206:	f080 8109 	bcs.w	800041c <__udivmoddi4+0x29c>
 800020a:	45a6      	cmp	lr, r4
 800020c:	f240 8106 	bls.w	800041c <__udivmoddi4+0x29c>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	eba4 040e 	sub.w	r4, r4, lr
 800021a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021e:	b11e      	cbz	r6, 8000228 <__udivmoddi4+0xa8>
 8000220:	2300      	movs	r3, #0
 8000222:	40d4      	lsrs	r4, r2
 8000224:	e9c6 4300 	strd	r4, r3, [r6]
 8000228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022c:	428b      	cmp	r3, r1
 800022e:	d908      	bls.n	8000242 <__udivmoddi4+0xc2>
 8000230:	2e00      	cmp	r6, #0
 8000232:	f000 80ee 	beq.w	8000412 <__udivmoddi4+0x292>
 8000236:	2100      	movs	r1, #0
 8000238:	e9c6 0500 	strd	r0, r5, [r6]
 800023c:	4608      	mov	r0, r1
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d14a      	bne.n	80002e0 <__udivmoddi4+0x160>
 800024a:	42ab      	cmp	r3, r5
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xd4>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 80fc 	bhi.w	800044c <__udivmoddi4+0x2cc>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb65 0303 	sbc.w	r3, r5, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4698      	mov	r8, r3
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e2      	beq.n	8000228 <__udivmoddi4+0xa8>
 8000262:	e9c6 4800 	strd	r4, r8, [r6]
 8000266:	e7df      	b.n	8000228 <__udivmoddi4+0xa8>
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xec>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	f040 8091 	bne.w	8000398 <__udivmoddi4+0x218>
 8000276:	eba1 000c 	sub.w	r0, r1, ip
 800027a:	2101      	movs	r1, #1
 800027c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000280:	fa1f fe8c 	uxth.w	lr, ip
 8000284:	fbb0 f3f7 	udiv	r3, r0, r7
 8000288:	fb07 0013 	mls	r0, r7, r3, r0
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000292:	fb0e f003 	mul.w	r0, lr, r3
 8000296:	42a8      	cmp	r0, r5
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x12c>
 800029a:	eb1c 0505 	adds.w	r5, ip, r5
 800029e:	f103 38ff 	add.w	r8, r3, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x12a>
 80002a4:	42a8      	cmp	r0, r5
 80002a6:	f200 80ce 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 80002aa:	4643      	mov	r3, r8
 80002ac:	1a2d      	subs	r5, r5, r0
 80002ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80002b2:	fb07 5510 	mls	r5, r7, r0, r5
 80002b6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	45a6      	cmp	lr, r4
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x156>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x154>
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	f200 80b6 	bhi.w	8000440 <__udivmoddi4+0x2c0>
 80002d4:	4628      	mov	r0, r5
 80002d6:	eba4 040e 	sub.w	r4, r4, lr
 80002da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002de:	e79e      	b.n	800021e <__udivmoddi4+0x9e>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbba f8f9 	udiv	r8, sl, r9
 80002fa:	fa20 f307 	lsr.w	r3, r0, r7
 80002fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000302:	408d      	lsls	r5, r1
 8000304:	fa1f fe8c 	uxth.w	lr, ip
 8000308:	431d      	orrs	r5, r3
 800030a:	fa00 f301 	lsl.w	r3, r0, r1
 800030e:	fb08 f00e 	mul.w	r0, r8, lr
 8000312:	0c2c      	lsrs	r4, r5, #16
 8000314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000318:	42a0      	cmp	r0, r4
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90b      	bls.n	8000338 <__udivmoddi4+0x1b8>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f108 3aff 	add.w	sl, r8, #4294967295
 8000328:	f080 8088 	bcs.w	800043c <__udivmoddi4+0x2bc>
 800032c:	42a0      	cmp	r0, r4
 800032e:	f240 8085 	bls.w	800043c <__udivmoddi4+0x2bc>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	4464      	add	r4, ip
 8000338:	1a24      	subs	r4, r4, r0
 800033a:	fbb4 f0f9 	udiv	r0, r4, r9
 800033e:	fb09 4410 	mls	r4, r9, r0, r4
 8000342:	fb00 fe0e 	mul.w	lr, r0, lr
 8000346:	b2ad      	uxth	r5, r5
 8000348:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x1e2>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 35ff 	add.w	r5, r0, #4294967295
 8000358:	d26c      	bcs.n	8000434 <__udivmoddi4+0x2b4>
 800035a:	45a6      	cmp	lr, r4
 800035c:	d96a      	bls.n	8000434 <__udivmoddi4+0x2b4>
 800035e:	3802      	subs	r0, #2
 8000360:	4464      	add	r4, ip
 8000362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000366:	fba0 9502 	umull	r9, r5, r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	42ac      	cmp	r4, r5
 8000370:	46c8      	mov	r8, r9
 8000372:	46ae      	mov	lr, r5
 8000374:	d356      	bcc.n	8000424 <__udivmoddi4+0x2a4>
 8000376:	d053      	beq.n	8000420 <__udivmoddi4+0x2a0>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d069      	beq.n	8000450 <__udivmoddi4+0x2d0>
 800037c:	ebb3 0208 	subs.w	r2, r3, r8
 8000380:	eb64 040e 	sbc.w	r4, r4, lr
 8000384:	fa22 f301 	lsr.w	r3, r2, r1
 8000388:	fa04 f707 	lsl.w	r7, r4, r7
 800038c:	431f      	orrs	r7, r3
 800038e:	40cc      	lsrs	r4, r1
 8000390:	e9c6 7400 	strd	r7, r4, [r6]
 8000394:	2100      	movs	r1, #0
 8000396:	e747      	b.n	8000228 <__udivmoddi4+0xa8>
 8000398:	fa0c fc02 	lsl.w	ip, ip, r2
 800039c:	f1c2 0120 	rsb	r1, r2, #32
 80003a0:	fa25 f301 	lsr.w	r3, r5, r1
 80003a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ac:	4095      	lsls	r5, r2
 80003ae:	430d      	orrs	r5, r1
 80003b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b4:	fb07 3311 	mls	r3, r7, r1, r3
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	0c28      	lsrs	r0, r5, #16
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	fb01 f30e 	mul.w	r3, r1, lr
 80003c6:	4283      	cmp	r3, r0
 80003c8:	fa04 f402 	lsl.w	r4, r4, r2
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x260>
 80003ce:	eb1c 0000 	adds.w	r0, ip, r0
 80003d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003d6:	d22f      	bcs.n	8000438 <__udivmoddi4+0x2b8>
 80003d8:	4283      	cmp	r3, r0
 80003da:	d92d      	bls.n	8000438 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	4460      	add	r0, ip
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e6:	fb07 0013 	mls	r0, r7, r3, r0
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003f0:	fb03 f00e 	mul.w	r0, r3, lr
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x28a>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000400:	d216      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 8000402:	42a8      	cmp	r0, r5
 8000404:	d914      	bls.n	8000430 <__udivmoddi4+0x2b0>
 8000406:	3b02      	subs	r3, #2
 8000408:	4465      	add	r5, ip
 800040a:	1a28      	subs	r0, r5, r0
 800040c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000410:	e738      	b.n	8000284 <__udivmoddi4+0x104>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e707      	b.n	8000228 <__udivmoddi4+0xa8>
 8000418:	462f      	mov	r7, r5
 800041a:	e6e4      	b.n	80001e6 <__udivmoddi4+0x66>
 800041c:	4618      	mov	r0, r3
 800041e:	e6f9      	b.n	8000214 <__udivmoddi4+0x94>
 8000420:	454b      	cmp	r3, r9
 8000422:	d2a9      	bcs.n	8000378 <__udivmoddi4+0x1f8>
 8000424:	ebb9 0802 	subs.w	r8, r9, r2
 8000428:	eb65 0e0c 	sbc.w	lr, r5, ip
 800042c:	3801      	subs	r0, #1
 800042e:	e7a3      	b.n	8000378 <__udivmoddi4+0x1f8>
 8000430:	4643      	mov	r3, r8
 8000432:	e7ea      	b.n	800040a <__udivmoddi4+0x28a>
 8000434:	4628      	mov	r0, r5
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e2>
 8000438:	4641      	mov	r1, r8
 800043a:	e7d1      	b.n	80003e0 <__udivmoddi4+0x260>
 800043c:	46d0      	mov	r8, sl
 800043e:	e77b      	b.n	8000338 <__udivmoddi4+0x1b8>
 8000440:	4464      	add	r4, ip
 8000442:	3802      	subs	r0, #2
 8000444:	e747      	b.n	80002d6 <__udivmoddi4+0x156>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	e72f      	b.n	80002ac <__udivmoddi4+0x12c>
 800044c:	4608      	mov	r0, r1
 800044e:	e706      	b.n	800025e <__udivmoddi4+0xde>
 8000450:	4631      	mov	r1, r6
 8000452:	e6e9      	b.n	8000228 <__udivmoddi4+0xa8>

08000454 <__aeabi_idiv0>:
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <MX_GPIO_Init+0x8c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_GPIO_Init+0x8c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80004b4:	2308      	movs	r3, #8
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_GPIO_Init+0x90>)
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <MX_GPIO_Init+0x94>)
 80004c8:	f000 ff4a 	bl	8001360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2009      	movs	r0, #9
 80004d2:	f000 fe82 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80004d6:	2009      	movs	r0, #9
 80004d8:	f000 fe9b 	bl	8001212 <HAL_NVIC_EnableIRQ>

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	10110000 	.word	0x10110000
 80004ec:	40010800 	.word	0x40010800

080004f0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000506:	b2db      	uxtb	r3, r3
 8000508:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6858      	ldr	r0, [r3, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	8adb      	ldrh	r3, [r3, #22]
 8000512:	2200      	movs	r2, #0
 8000514:	4619      	mov	r1, r3
 8000516:	f001 f8a7 	bl	8001668 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	1cf9      	adds	r1, r7, #3
 8000524:	2201      	movs	r2, #1
 8000526:	f001 fd45 	bl	8001fb4 <HAL_SPI_Transmit>
 800052a:	4603      	mov	r3, r0
 800052c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f107 010f 	add.w	r1, r7, #15
 800053a:	2201      	movs	r2, #1
 800053c:	f001 fe76 	bl	800222c <HAL_SPI_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6858      	ldr	r0, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8adb      	ldrh	r3, [r3, #22]
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f001 f88a 	bl	8001668 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
 800056a:	4613      	mov	r3, r2
 800056c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000574:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	8adb      	ldrh	r3, [r3, #22]
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	f001 f868 	bl	8001668 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f107 010a 	add.w	r1, r7, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	f001 fd05 	bl	8001fb4 <HAL_SPI_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8adb      	ldrh	r3, [r3, #22]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	f001 f855 	bl	8001668 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	4611      	mov	r1, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6858      	ldr	r0, [r3, #4]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	8adb      	ldrh	r3, [r3, #22]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 f83c 	bl	8001668 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f107 0117 	add.w	r1, r7, #23
 80005fc:	2201      	movs	r2, #1
 80005fe:	f001 fcd9 	bl	8001fb4 <HAL_SPI_Transmit>
 8000602:	4603      	mov	r3, r0
 8000604:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d108      	bne.n	800061e <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	b292      	uxth	r2, r2
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f8bc 	bl	8002794 <HAL_SPI_Transmit_DMA>
 800061c:	e012      	b.n	8000644 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	b29a      	uxth	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	f001 fcc2 	bl	8001fb4 <HAL_SPI_Transmit>
 8000630:	4603      	mov	r3, r0
 8000632:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6858      	ldr	r0, [r3, #4]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	8adb      	ldrh	r3, [r3, #22]
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	f001 f812 	bl	8001668 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ff7b 	bl	800055e <write_register>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b2c      	cmp	r3, #44	; 0x2c
 8000680:	d801      	bhi.n	8000686 <set_OCP+0x16>
    imax = 45;
 8000682:	232d      	movs	r3, #45	; 0x2d
 8000684:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	2bf0      	cmp	r3, #240	; 0xf0
 800068a:	d901      	bls.n	8000690 <set_OCP+0x20>
    imax = 240;
 800068c:	23f0      	movs	r3, #240	; 0xf0
 800068e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b81      	cmp	r3, #129	; 0x81
 8000694:	d809      	bhi.n	80006aa <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	3b2d      	subs	r3, #45	; 0x2d
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <set_OCP+0x68>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1052      	asrs	r2, r2, #1
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e008      	b.n	80006bc <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	331e      	adds	r3, #30
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <set_OCP+0x68>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1092      	asrs	r2, r2, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	210b      	movs	r1, #11
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff48 	bl	800055e <write_register>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	66666667 	.word	0x66666667

080006dc <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006e4:	211d      	movs	r1, #29
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff02 	bl	80004f0 <read_register>
 80006ec:	4603      	mov	r3, r0
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80006fe:	211e      	movs	r1, #30
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff fef5 	bl	80004f0 <read_register>
 8000706:	4603      	mov	r3, r0
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 800070c:	2304      	movs	r3, #4
 800070e:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b0a      	cmp	r3, #10
 8000714:	d908      	bls.n	8000728 <set_low_data_rate_optimization+0x4c>
 8000716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800071a:	1fd1      	subs	r1, r2, #7
 800071c:	430b      	orrs	r3, r1
 800071e:	d103      	bne.n	8000728 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	461a      	mov	r2, r3
 800072c:	2126      	movs	r1, #38	; 0x26
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff15 	bl	800055e <write_register>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}

0800073c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff7f 	bl	800064a <set_mode>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800075c:	2101      	movs	r1, #1
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff73 	bl	800064a <set_mode>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000774:	211d      	movs	r1, #29
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff feba 	bl	80004f0 <read_register>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	461a      	mov	r2, r3
 800078c:	211d      	movs	r1, #29
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fee5 	bl	800055e <write_register>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10e      	bne.n	80007ce <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d901      	bls.n	80007ba <lora_set_tx_power+0x1e>
      level = 15;
 80007b6:	230f      	movs	r3, #15
 80007b8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	2109      	movs	r1, #9
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fec9 	bl	800055e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007cc:	e02e      	b.n	800082c <lora_set_tx_power+0x90>
    if (level > 20) {
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d901      	bls.n	80007d8 <lora_set_tx_power+0x3c>
      level = 20;
 80007d4:	2314      	movs	r3, #20
 80007d6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d801      	bhi.n	80007e2 <lora_set_tx_power+0x46>
      level = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b11      	cmp	r3, #17
 80007e6:	d90c      	bls.n	8000802 <lora_set_tx_power+0x66>
      level -= 3;
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	3b03      	subs	r3, #3
 80007ec:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80007ee:	2287      	movs	r2, #135	; 0x87
 80007f0:	214d      	movs	r1, #77	; 0x4d
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff feb3 	bl	800055e <write_register>
      set_OCP(lora, 140);
 80007f8:	218c      	movs	r1, #140	; 0x8c
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff38 	bl	8000670 <set_OCP>
 8000800:	e008      	b.n	8000814 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000802:	2284      	movs	r2, #132	; 0x84
 8000804:	214d      	movs	r1, #77	; 0x4d
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fea9 	bl	800055e <write_register>
      set_OCP(lora, 97);
 800080c:	2161      	movs	r1, #97	; 0x61
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff2e 	bl	8000670 <set_OCP>
    level -= 2;
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	3b02      	subs	r3, #2
 8000818:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	2109      	movs	r1, #9
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fe99 	bl	800055e <write_register>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	04d9      	lsls	r1, r3, #19
 800084e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000852:	04d0      	lsls	r0, r2, #19
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <lora_set_frequency+0x88>)
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	f7ff fc79 	bl	8000150 <__aeabi_uldivmod>
 800085e:	4602      	mov	r2, r0
 8000860:	460b      	mov	r3, r1
 8000862:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000866:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	0c02      	lsrs	r2, r0, #16
 8000874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000878:	0c0b      	lsrs	r3, r1, #16
 800087a:	b2d3      	uxtb	r3, r2
 800087c:	461a      	mov	r2, r3
 800087e:	2106      	movs	r1, #6
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff fe6c 	bl	800055e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	0a02      	lsrs	r2, r0, #8
 8000894:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000898:	0a0b      	lsrs	r3, r1, #8
 800089a:	b2d3      	uxtb	r3, r2
 800089c:	461a      	mov	r2, r3
 800089e:	2107      	movs	r1, #7
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fe5c 	bl	800055e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008a6:	7c3b      	ldrb	r3, [r7, #16]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2108      	movs	r1, #8
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fe56 	bl	800055e <write_register>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	01e84800 	.word	0x01e84800

080008c0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d802      	bhi.n	80008d8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008d2:	2306      	movs	r3, #6
 80008d4:	70fb      	strb	r3, [r7, #3]
 80008d6:	e004      	b.n	80008e2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b0c      	cmp	r3, #12
 80008dc:	d901      	bls.n	80008e2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80008de:	230c      	movs	r3, #12
 80008e0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d10a      	bne.n	80008fe <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80008e8:	22c5      	movs	r2, #197	; 0xc5
 80008ea:	2131      	movs	r1, #49	; 0x31
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fe36 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80008f2:	220c      	movs	r2, #12
 80008f4:	2137      	movs	r1, #55	; 0x37
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe31 	bl	800055e <write_register>
 80008fc:	e009      	b.n	8000912 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80008fe:	22c3      	movs	r2, #195	; 0xc3
 8000900:	2131      	movs	r1, #49	; 0x31
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe2b 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000908:	220a      	movs	r2, #10
 800090a:	2137      	movs	r1, #55	; 0x37
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe26 	bl	800055e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000912:	211e      	movs	r1, #30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fdeb 	bl	80004f0 <read_register>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	b25a      	sxtb	r2, r3
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b25b      	sxtb	r3, r3
 8000932:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	211e      	movs	r1, #30
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe0f 	bl	800055e <write_register>

  set_low_data_rate_optimization(lora);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fecb 	bl	80006dc <set_low_data_rate_optimization>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	2120      	movs	r1, #32
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fdf9 	bl	800055e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2121      	movs	r1, #33	; 0x21
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fdef 	bl	800055e <write_register>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000990:	2142      	movs	r1, #66	; 0x42
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fdac 	bl	80004f0 <read_register>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80009aa:	2101      	movs	r1, #1
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fd9f 	bl	80004f0 <read_register>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d101      	bne.n	80009c4 <lora_is_transmitting+0x22>
 80009c0:	2305      	movs	r3, #5
 80009c2:	e000      	b.n	80009c6 <lora_is_transmitting+0x24>
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	4611      	mov	r1, r2
 80009da:	461a      	mov	r2, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff ffdc 	bl	80009a2 <lora_is_transmitting>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80009f0:	2305      	movs	r3, #5
 80009f2:	e02a      	b.n	8000a4a <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80009f4:	2101      	movs	r1, #1
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fe27 	bl	800064a <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f83a 	bl	8000a76 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	7d1b      	ldrb	r3, [r3, #20]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210d      	movs	r1, #13
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff fda7 	bl	800055e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	7d1b      	ldrb	r3, [r3, #20]
 8000a14:	461a      	mov	r2, r3
 8000a16:	210e      	movs	r1, #14
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fda0 	bl	800055e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2122      	movs	r1, #34	; 0x22
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff fd9a 	bl	800055e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fdc8 	bl	80005c6 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d101      	bne.n	8000a40 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e004      	b.n	8000a4a <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000a40:	2103      	movs	r1, #3
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fe01 	bl	800064a <set_mode>
  return LORA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	2302      	movs	r3, #2
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff ffb1 	bl	80009ce <lora_send_packet_base>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000a7e:	2208      	movs	r2, #8
 8000a80:	2112      	movs	r1, #18
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fd6b 	bl	800055e <write_register>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	887a      	ldrh	r2, [r7, #2]
 8000aae:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000ab0:	6a3a      	ldr	r2, [r7, #32]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ace:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff ff59 	bl	8000988 <lora_version>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	2b12      	cmp	r3, #18
 8000ade:	d001      	beq.n	8000ae4 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	e031      	b.n	8000b48 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fe29 	bl	800073c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fe26 	bl	800073c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000af0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fe9d 	bl	8000834 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000afa:	2107      	movs	r1, #7
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fedf 	bl	80008c0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000b02:	210a      	movs	r1, #10
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff ff22 	bl	800094e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fe2e 	bl	800076c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000b10:	210c      	movs	r1, #12
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fcec 	bl	80004f0 <read_register>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000b1c:	7dbb      	ldrb	r3, [r7, #22]
 8000b1e:	f043 0303 	orr.w	r3, r3, #3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	210c      	movs	r1, #12
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd18 	bl	800055e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000b2e:	2204      	movs	r2, #4
 8000b30:	2126      	movs	r1, #38	; 0x26
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff fd13 	bl	800055e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000b38:	2111      	movs	r1, #17
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff fe2e 	bl	800079c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff fe07 	bl	8000754 <lora_mode_standby>

  return LORA_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af02      	add	r7, sp, #8
int main(void)
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 f9e0 	bl	8000f20 <HAL_Init>
  lora_sx1276 lora;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f856 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff fc78 	bl	8000458 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b68:	f000 f89c 	bl	8000ca4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LoRa module
  uint8_t init = lora_init(&lora, &hspi1, GPIOA, GPIO_PIN_4, LORA_BASE_FREQUENCY_EU);
 8000b6c:	4638      	mov	r0, r7
 8000b6e:	a326      	add	r3, pc, #152	; (adr r3, 8000c08 <main+0xb8>)
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	e9cd 2300 	strd	r2, r3, [sp]
 8000b78:	2310      	movs	r3, #16
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <main+0x98>)
 8000b7c:	491b      	ldr	r1, [pc, #108]	; (8000bec <main+0x9c>)
 8000b7e:	f7ff ff87 	bl	8000a90 <lora_init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	77fb      	strb	r3, [r7, #31]
  if (init != LORA_OK) {
 8000b86:	7ffb      	ldrb	r3, [r7, #31]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <main+0x44>
	// Initialization failed
    test = 404;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <main+0xa0>)
 8000b8e:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000b92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	#ifdef SLAVE
    // Send packets in blocking mode
	lora_send_packet(&lora, test_var, 4);
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <main+0xa4>)
 8000b96:	6819      	ldr	r1, [r3, #0]
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff58 	bl	8000a52 <lora_send_packet>
	HAL_Delay(5);
 8000ba2:	2005      	movs	r0, #5
 8000ba4:	f000 fa1e 	bl	8000fe4 <HAL_Delay>
	lora_send_packet(&lora, test1_var, 4);
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <main+0xa8>)
 8000baa:	6819      	ldr	r1, [r3, #0]
 8000bac:	463b      	mov	r3, r7
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff4e 	bl	8000a52 <lora_send_packet>
	HAL_Delay(5);
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f000 fa14 	bl	8000fe4 <HAL_Delay>

	uint8_t packet_avail = lora_is_transmitting(&lora);
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff feef 	bl	80009a2 <lora_is_transmitting>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	77bb      	strb	r3, [r7, #30]
		if (packet_avail == 0)
 8000bc8:	7fbb      	ldrb	r3, [r7, #30]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <main+0x88>
			sprintf(instruct, "No packet transmission");
 8000bce:	490b      	ldr	r1, [pc, #44]	; (8000bfc <main+0xac>)
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <main+0xb0>)
 8000bd2:	f002 f85b 	bl	8002c8c <siprintf>
 8000bd6:	e7dd      	b.n	8000b94 <main+0x44>
		else
			sprintf(instruct, "Transmitting packet");
 8000bd8:	490a      	ldr	r1, [pc, #40]	; (8000c04 <main+0xb4>)
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <main+0xb0>)
 8000bdc:	f002 f856 	bl	8002c8c <siprintf>
  {
 8000be0:	e7d8      	b.n	8000b94 <main+0x44>
 8000be2:	bf00      	nop
 8000be4:	f3af 8000 	nop.w
 8000be8:	40010800 	.word	0x40010800
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000094 	.word	0x20000094
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	080035a8 	.word	0x080035a8
 8000c00:	20000098 	.word	0x20000098
 8000c04:	080035c0 	.word	0x080035c0
 8000c08:	33bca100 	.word	0x33bca100
 8000c0c:	00000000 	.word	0x00000000

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b090      	sub	sp, #64	; 0x40
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	2228      	movs	r2, #40	; 0x28
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 f82c 	bl	8002c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fd3f 	bl	80016dc <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c64:	f000 f818 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 ffad 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c8c:	f000 f804 	bl	8000c98 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3740      	adds	r7, #64	; 0x40
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <MX_SPI1_Init+0x60>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_SPI1_Init+0x5c>)
 8000cec:	f001 f8de 	bl	8001eac <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000cf6:	f7ff ffcf 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000b8 	.word	0x200000b8
 8000d04:	40013000 	.word	0x40013000

08000d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d12f      	bne.n	8000d88 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000d58:	23b0      	movs	r3, #176	; 0xb0
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d6c:	f000 faf8 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d84:	f000 faec 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013000 	.word	0x40013000
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_MspInit+0x60>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_MspInit+0x60>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f8b1 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000e52:	2008      	movs	r0, #8
 8000e54:	f000 fc20 	bl	8001698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f001 fecc 	bl	8002c28 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20005000 	.word	0x20005000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000110 	.word	0x20000110
 8000ec4:	20000128 	.word	0x20000128

08000ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000efa:	f7ff ffe5 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f001 fe99 	bl	8002c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff fe25 	bl	8000b50 <main>
  bx lr
 8000f06:	4770      	bx	lr
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f10:	08003638 	.word	0x08003638
  ldr r2, =_sbss
 8000f14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f18:	20000128 	.word	0x20000128

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x28>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x28>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f947 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff ff2e 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f95f 	bl	800122e <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f927 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_IncTick+0x20>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	20000114 	.word	0x20000114

08000fd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <HAL_GetTick+0x10>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000114 	.word	0x20000114

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff fff0 	bl	8000fd0 <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffe0 	bl	8000fd0 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000010 	.word	0x20000010

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4906      	ldr	r1, [pc, #24]	; (80010c4 <__NVIC_EnableIRQ+0x34>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff90 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff2d 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff42 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff90 	bl	800111c <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5f 	bl	80010c8 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff35 	bl	8001090 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Start_IT+0x20>
 8001262:	2302      	movs	r3, #2
 8001264:	e04a      	b.n	80012fc <HAL_DMA_Start_IT+0xb6>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001274:	2b01      	cmp	r3, #1
 8001276:	d13a      	bne.n	80012ee <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f831 	bl	8001304 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 020e 	orr.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e00f      	b.n	80012dc <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0204 	bic.w	r2, r2, #4
 80012ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 020a 	orr.w	r2, r2, #10
 80012da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e005      	b.n	80012fa <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012f6:	2302      	movs	r3, #2
 80012f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d108      	bne.n	8001344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001342:	e007      	b.n	8001354 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e169      	b.n	8001648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001374:	2201      	movs	r2, #1
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8158 	bne.w	8001642 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a9a      	ldr	r2, [pc, #616]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 800139c:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d875      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013a2:	4a98      	ldr	r2, [pc, #608]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d058      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013a8:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d86f      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ae:	4a96      	ldr	r2, [pc, #600]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d052      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d869      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ba:	4a94      	ldr	r2, [pc, #592]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04c      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013c0:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d863      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013c6:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d046      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013cc:	4a90      	ldr	r2, [pc, #576]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d85d      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d82a      	bhi.n	800142c <HAL_GPIO_Init+0xcc>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d859      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_GPIO_Init+0x80>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001435 	.word	0x08001435
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001489 	.word	0x08001489
 80013f0:	0800148f 	.word	0x0800148f
 80013f4:	0800148f 	.word	0x0800148f
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	0800148f 	.word	0x0800148f
 8001400:	0800148f 	.word	0x0800148f
 8001404:	0800148f 	.word	0x0800148f
 8001408:	0800148f 	.word	0x0800148f
 800140c:	0800148f 	.word	0x0800148f
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800148f 	.word	0x0800148f
 8001418:	0800148f 	.word	0x0800148f
 800141c:	0800148f 	.word	0x0800148f
 8001420:	0800148f 	.word	0x0800148f
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001451 	.word	0x08001451
 800142c:	4a79      	ldr	r2, [pc, #484]	; (8001614 <HAL_GPIO_Init+0x2b4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e029      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e024      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e01f      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e01a      	b.n	8001490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e013      	b.n	8001490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
          break;
 800147a:	e009      	b.n	8001490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
          break;
 8001486:	e003      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x130>
          break;
 800148e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d801      	bhi.n	800149a <HAL_GPIO_Init+0x13a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e001      	b.n	800149e <HAL_GPIO_Init+0x13e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d802      	bhi.n	80014ac <HAL_GPIO_Init+0x14c>
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x152>
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b08      	subs	r3, #8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	210f      	movs	r1, #15
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80b1 	beq.w	8001642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e0:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f8:	4a48      	ldr	r2, [pc, #288]	; (800161c <HAL_GPIO_Init+0x2bc>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a40      	ldr	r2, [pc, #256]	; (8001620 <HAL_GPIO_Init+0x2c0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d013      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3f      	ldr	r2, [pc, #252]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_GPIO_Init+0x2cc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_GPIO_Init+0x1e0>
 800153c:	2303      	movs	r3, #3
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001540:	2304      	movs	r3, #4
 8001542:	e004      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001544:	2302      	movs	r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 800154c:	2300      	movs	r3, #0
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	f002 0203 	and.w	r2, r2, #3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4093      	lsls	r3, r2
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155e:	492f      	ldr	r1, [pc, #188]	; (800161c <HAL_GPIO_Init+0x2bc>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	492c      	ldr	r1, [pc, #176]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	4928      	ldr	r1, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4922      	ldr	r1, [pc, #136]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	491e      	ldr	r1, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4914      	ldr	r1, [pc, #80]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e021      	b.n	8001642 <HAL_GPIO_Init+0x2e2>
 80015fe:	bf00      	nop
 8001600:	10320000 	.word	0x10320000
 8001604:	10310000 	.word	0x10310000
 8001608:	10220000 	.word	0x10220000
 800160c:	10210000 	.word	0x10210000
 8001610:	10120000 	.word	0x10120000
 8001614:	10110000 	.word	0x10110000
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40011000 	.word	0x40011000
 800162c:	40011400 	.word	0x40011400
 8001630:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_GPIO_Init+0x304>)
 800163e:	4013      	ands	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	f47f ae8e 	bne.w	8001374 <HAL_GPIO_Init+0x14>
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	372c      	adds	r7, #44	; 0x2c
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f806 	bl	80016c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e272      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8087 	beq.w	800180a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016fc:	4b92      	ldr	r3, [pc, #584]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b04      	cmp	r3, #4
 8001706:	d00c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001708:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d112      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
 8001714:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d10b      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	4b89      	ldr	r3, [pc, #548]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06c      	beq.n	8001808 <HAL_RCC_OscConfig+0x12c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d168      	bne.n	8001808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e24c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x76>
 8001744:	4b80      	ldr	r3, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7f      	ldr	r2, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800174a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e02e      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0xbc>
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001798:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a67      	ldr	r2, [pc, #412]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc0a 	bl	8000fd0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fc06 	bl	8000fd0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e200      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xe4>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fbf6 	bl	8000fd0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fbf2 	bl	8000fd0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1ec      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x10c>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001816:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
 800182e:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4939      	ldr	r1, [pc, #228]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fbab 	bl	8000fd0 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fba7 	bl	8000fd0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1a1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4927      	ldr	r1, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb8a 	bl	8000fd0 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fb86 	bl	8000fd0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e180      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03a      	beq.n	8001960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_RCC_OscConfig+0x274>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fb6a 	bl	8000fd0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fb66 	bl	8000fd0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e160      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f000 faa6 	bl	8001e70 <RCC_Delay>
 8001924:	e01c      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_RCC_OscConfig+0x274>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fb50 	bl	8000fd0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001932:	e00f      	b.n	8001954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fb4c 	bl	8000fd0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d908      	bls.n	8001954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e146      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	42420000 	.word	0x42420000
 8001950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e9      	bne.n	8001934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a6 	beq.w	8001aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a87      	ldr	r2, [pc, #540]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b82      	ldr	r3, [pc, #520]	; (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7e      	ldr	r2, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb0d 	bl	8000fd0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fb09 	bl	8000fd0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b64      	cmp	r3, #100	; 0x64
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e103      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x312>
 80019e0:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e02d      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x334>
 80019f6:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a69      	ldr	r2, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a66      	ldr	r2, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	e01c      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x356>
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a5d      	ldr	r2, [pc, #372]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a5a      	ldr	r2, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fabd 	bl	8000fd0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fab9 	bl	8000fd0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0b1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ee      	beq.n	8001a5a <HAL_RCC_OscConfig+0x37e>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff faa7 	bl	8000fd0 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff faa3 	bl	8000fd0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e09b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a3b      	ldr	r2, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d061      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d146      	bne.n	8001b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fa77 	bl	8000fd0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff fa73 	bl	8000fd0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e06d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d108      	bne.n	8001b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4921      	ldr	r1, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a19      	ldr	r1, [r3, #32]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	430b      	orrs	r3, r1
 8001b32:	491b      	ldr	r1, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa47 	bl	8000fd0 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fa43 	bl	8000fd0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e03d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46a>
 8001b64:	e035      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fa30 	bl	8000fd0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fa2c 	bl	8000fd0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e026      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x498>
 8001b92:	e01e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e019      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x500>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0d0      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4965      	ldr	r1, [pc, #404]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a52      	ldr	r2, [pc, #328]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	494d      	ldr	r1, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d040      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e073      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4936      	ldr	r1, [pc, #216]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f97e 	bl	8000fd0 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f97a 	bl	8000fd0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e053      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d210      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	4922      	ldr	r1, [pc, #136]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e032      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4916      	ldr	r1, [pc, #88]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490e      	ldr	r1, [pc, #56]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f821 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490a      	ldr	r1, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x1cc>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f8dc 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	080035e4 	.word	0x080035e4
 8001dac:	20000008 	.word	0x20000008
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b490      	push	{r4, r7}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xac>)
 8001dbc:	1d3c      	adds	r4, r7, #4
 8001dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc4:	f240 2301 	movw	r3, #513	; 0x201
 8001dc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x46>
 8001df2:	e02b      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	e02b      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3328      	adds	r3, #40	; 0x28
 8001e04:	443b      	add	r3, r7
 8001e06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	0c5b      	lsrs	r3, r3, #17
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	3328      	adds	r3, #40	; 0x28
 8001e22:	443b      	add	r3, r7
 8001e24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	e004      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	623b      	str	r3, [r7, #32]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4e:	623b      	str	r3, [r7, #32]
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc90      	pop	{r4, r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	080035d4 	.word	0x080035d4
 8001e64:	40021000 	.word	0x40021000
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	003d0900 	.word	0x003d0900

08001e70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <RCC_Delay+0x34>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <RCC_Delay+0x38>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0a5b      	lsrs	r3, r3, #9
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e8c:	bf00      	nop
  }
  while (Delay --);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e5a      	subs	r2, r3, #1
 8001e92:	60fa      	str	r2, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f9      	bne.n	8001e8c <RCC_Delay+0x1c>
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	10624dd3 	.word	0x10624dd3

08001eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e076      	b.n	8001fac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ece:	d009      	beq.n	8001ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
 8001ed6:	e005      	b.n	8001ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe ff02 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	ea42 0103 	orr.w	r1, r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	0c1a      	lsrs	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f002 0204 	and.w	r2, r2, #4
 8001f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_SPI_Transmit+0x22>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e126      	b.n	8002224 <HAL_SPI_Transmit+0x270>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fde:	f7fe fff7 	bl	8000fd0 <HAL_GetTick>
 8001fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d002      	beq.n	8001ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ff8:	e10b      	b.n	8002212 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_SPI_Transmit+0x52>
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800200a:	e102      	b.n	8002212 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	d10f      	bne.n	8002074 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d007      	beq.n	8002092 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800209a:	d14b      	bne.n	8002134 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Transmit+0xf6>
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d13e      	bne.n	8002128 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ce:	e02b      	b.n	8002128 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d112      	bne.n	8002104 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	1c9a      	adds	r2, r3, #2
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	86da      	strh	r2, [r3, #54]	; 0x36
 8002102:	e011      	b.n	8002128 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002104:	f7fe ff64 	bl	8000fd0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d803      	bhi.n	800211c <HAL_SPI_Transmit+0x168>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d102      	bne.n	8002122 <HAL_SPI_Transmit+0x16e>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002126:	e074      	b.n	8002212 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ce      	bne.n	80020d0 <HAL_SPI_Transmit+0x11c>
 8002132:	e04c      	b.n	80021ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0x18e>
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d140      	bne.n	80021c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002168:	e02c      	b.n	80021c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d113      	bne.n	80021a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	86da      	strh	r2, [r3, #54]	; 0x36
 800219e:	e011      	b.n	80021c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a0:	f7fe ff16 	bl	8000fd0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d803      	bhi.n	80021b8 <HAL_SPI_Transmit+0x204>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Transmit+0x20a>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021c2:	e026      	b.n	8002212 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cd      	bne.n	800216a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fd0a 	bl	8002bec <SPI_EndRxTxTransaction>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
 800220e:	e000      	b.n	8002212 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002222:	7ffb      	ldrb	r3, [r7, #31]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002248:	d112      	bne.n	8002270 <HAL_SPI_Receive+0x44>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10e      	bne.n	8002270 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2204      	movs	r2, #4
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8f1 	bl	800244e <HAL_SPI_TransmitReceive>
 800226c:	4603      	mov	r3, r0
 800226e:	e0ea      	b.n	8002446 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_SPI_Receive+0x52>
 800227a:	2302      	movs	r3, #2
 800227c:	e0e3      	b.n	8002446 <HAL_SPI_Receive+0x21a>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002286:	f7fe fea3 	bl	8000fd0 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d002      	beq.n	800229e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002298:	2302      	movs	r3, #2
 800229a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800229c:	e0ca      	b.n	8002434 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Receive+0x7e>
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ae:	e0c1      	b.n	8002434 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2204      	movs	r2, #4
 80022b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f6:	d10f      	bne.n	8002318 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002306:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d007      	beq.n	8002336 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d162      	bne.n	8002404 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800233e:	e02e      	b.n	800239e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d115      	bne.n	800237a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f103 020c 	add.w	r2, r3, #12
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002378:	e011      	b.n	800239e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237a:	f7fe fe29 	bl	8000fd0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d803      	bhi.n	8002392 <HAL_SPI_Receive+0x166>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d102      	bne.n	8002398 <HAL_SPI_Receive+0x16c>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800239c:	e04a      	b.n	8002434 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1cb      	bne.n	8002340 <HAL_SPI_Receive+0x114>
 80023a8:	e031      	b.n	800240e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d113      	bne.n	80023e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	b292      	uxth	r2, r2
 80023c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	1c9a      	adds	r2, r3, #2
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023de:	e011      	b.n	8002404 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e0:	f7fe fdf6 	bl	8000fd0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d803      	bhi.n	80023f8 <HAL_SPI_Receive+0x1cc>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Receive+0x1d2>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002402:	e017      	b.n	8002434 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1cd      	bne.n	80023aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fb98 	bl	8002b48 <SPI_EndRxTransaction>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	e000      	b.n	8002434 <HAL_SPI_Receive+0x208>
  }

error :
 8002432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b08c      	sub	sp, #48	; 0x30
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x26>
 8002470:	2302      	movs	r3, #2
 8002472:	e18a      	b.n	800278a <HAL_SPI_TransmitReceive+0x33c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800247c:	f7fe fda8 	bl	8000fd0 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002496:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800249a:	2b01      	cmp	r3, #1
 800249c:	d00f      	beq.n	80024be <HAL_SPI_TransmitReceive+0x70>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a4:	d107      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x68>
 80024ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d003      	beq.n	80024be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024bc:	e15b      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x82>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x82>
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024d6:	e14e      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d003      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2205      	movs	r2, #5
 80024e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d007      	beq.n	8002540 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002548:	d178      	bne.n	800263c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x10a>
 8002552:	8b7b      	ldrh	r3, [r7, #26]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d166      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257c:	e053      	b.n	8002626 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b02      	cmp	r3, #2
 800258a:	d11b      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x176>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x176>
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d113      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d119      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x1b8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d014      	beq.n	8002606 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	b292      	uxth	r2, r2
 80025e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	1c9a      	adds	r2, r3, #2
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002606:	f7fe fce3 	bl	8000fd0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002612:	429a      	cmp	r2, r3
 8002614:	d807      	bhi.n	8002626 <HAL_SPI_TransmitReceive+0x1d8>
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d003      	beq.n	8002626 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002624:	e0a7      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1a6      	bne.n	800257e <HAL_SPI_TransmitReceive+0x130>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1a1      	bne.n	800257e <HAL_SPI_TransmitReceive+0x130>
 800263a:	e07c      	b.n	8002736 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_SPI_TransmitReceive+0x1fc>
 8002644:	8b7b      	ldrh	r3, [r7, #26]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d16b      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002670:	e057      	b.n	8002722 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11c      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x26c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x26c>
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d114      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d119      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x2ae>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d014      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026fc:	f7fe fc68 	bl	8000fd0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002708:	429a      	cmp	r2, r3
 800270a:	d803      	bhi.n	8002714 <HAL_SPI_TransmitReceive+0x2c6>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d102      	bne.n	800271a <HAL_SPI_TransmitReceive+0x2cc>
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002720:	e029      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1a2      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x224>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19d      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa56 	bl	8002bec <SPI_EndRxTxTransaction>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002752:	e010      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	e000      	b.n	8002776 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002774:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800278a:	4618      	mov	r0, r3
 800278c:	3730      	adds	r7, #48	; 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_SPI_Transmit_DMA+0x20>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e09b      	b.n	80028ec <HAL_SPI_Transmit_DMA+0x158>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027cc:	e089      	b.n	80028e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_SPI_Transmit_DMA+0x46>
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027de:	e080      	b.n	80028e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002826:	d10f      	bne.n	8002848 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002836:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002846:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	4a29      	ldr	r2, [pc, #164]	; (80028f4 <HAL_SPI_Transmit_DMA+0x160>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_SPI_Transmit_DMA+0x164>)
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_SPI_Transmit_DMA+0x168>)
 800285e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	2200      	movs	r2, #0
 8002866:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4619      	mov	r1, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002880:	f7fe fce1 	bl	8001246 <HAL_DMA_Start_IT>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80028a2:	e01e      	b.n	80028e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0202 	orr.w	r2, r2, #2
 80028e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	080029dd 	.word	0x080029dd
 80028f8:	08002937 	.word	0x08002937
 80028fc:	080029f9 	.word	0x080029f9

08002900 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002944:	f7fe fb44 	bl	8000fd0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d03b      	beq.n	80029d0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0220 	bic.w	r2, r2, #32
 8002966:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0202 	bic.w	r2, r2, #2
 8002976:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	2164      	movs	r1, #100	; 0x64
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f000 f935 	bl	8002bec <SPI_EndRxTxTransaction>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029c8:	6978      	ldr	r0, [r7, #20]
 80029ca:	f7ff ffab 	bl	8002924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029ce:	e002      	b.n	80029d6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80029d0:	6978      	ldr	r0, [r7, #20]
 80029d2:	f7ff ff95 	bl	8002900 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff91 	bl	8002912 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0203 	bic.w	r2, r2, #3
 8002a14:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff7a 	bl	8002924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a48:	f7fe fac2 	bl	8000fd0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a58:	f7fe faba 	bl	8000fd0 <HAL_GetTick>
 8002a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6e:	e054      	b.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d050      	beq.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a78:	f7fe faaa 	bl	8000fd0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d902      	bls.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d13d      	bne.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa6:	d111      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	d004      	beq.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d107      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d10f      	bne.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e017      	b.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d19b      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000008 	.word	0x20000008

08002b48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5c:	d111      	bne.n	8002b82 <SPI_EndRxTransaction+0x3a>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b66:	d004      	beq.n	8002b72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d107      	bne.n	8002b82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d117      	bne.n	8002bbc <SPI_EndRxTransaction+0x74>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b94:	d112      	bne.n	8002bbc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff ff49 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01a      	beq.n	8002be2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e013      	b.n	8002be4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff ff36 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e000      	b.n	8002be4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ff18 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e000      	b.n	8002c20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <__errno>:
 8002c28:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <__errno+0x8>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000014 	.word	0x20000014

08002c34 <__libc_init_array>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	2600      	movs	r6, #0
 8002c38:	4d0c      	ldr	r5, [pc, #48]	; (8002c6c <__libc_init_array+0x38>)
 8002c3a:	4c0d      	ldr	r4, [pc, #52]	; (8002c70 <__libc_init_array+0x3c>)
 8002c3c:	1b64      	subs	r4, r4, r5
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	42a6      	cmp	r6, r4
 8002c42:	d109      	bne.n	8002c58 <__libc_init_array+0x24>
 8002c44:	f000 fc9c 	bl	8003580 <_init>
 8002c48:	2600      	movs	r6, #0
 8002c4a:	4d0a      	ldr	r5, [pc, #40]	; (8002c74 <__libc_init_array+0x40>)
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	; (8002c78 <__libc_init_array+0x44>)
 8002c4e:	1b64      	subs	r4, r4, r5
 8002c50:	10a4      	asrs	r4, r4, #2
 8002c52:	42a6      	cmp	r6, r4
 8002c54:	d105      	bne.n	8002c62 <__libc_init_array+0x2e>
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5c:	4798      	blx	r3
 8002c5e:	3601      	adds	r6, #1
 8002c60:	e7ee      	b.n	8002c40 <__libc_init_array+0xc>
 8002c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c66:	4798      	blx	r3
 8002c68:	3601      	adds	r6, #1
 8002c6a:	e7f2      	b.n	8002c52 <__libc_init_array+0x1e>
 8002c6c:	08003630 	.word	0x08003630
 8002c70:	08003630 	.word	0x08003630
 8002c74:	08003630 	.word	0x08003630
 8002c78:	08003634 	.word	0x08003634

08002c7c <memset>:
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4402      	add	r2, r0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d100      	bne.n	8002c86 <memset+0xa>
 8002c84:	4770      	bx	lr
 8002c86:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8a:	e7f9      	b.n	8002c80 <memset+0x4>

08002c8c <siprintf>:
 8002c8c:	b40e      	push	{r1, r2, r3}
 8002c8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c92:	b500      	push	{lr}
 8002c94:	b09c      	sub	sp, #112	; 0x70
 8002c96:	ab1d      	add	r3, sp, #116	; 0x74
 8002c98:	9002      	str	r0, [sp, #8]
 8002c9a:	9006      	str	r0, [sp, #24]
 8002c9c:	9107      	str	r1, [sp, #28]
 8002c9e:	9104      	str	r1, [sp, #16]
 8002ca0:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <siprintf+0x38>)
 8002ca2:	4909      	ldr	r1, [pc, #36]	; (8002cc8 <siprintf+0x3c>)
 8002ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca8:	9105      	str	r1, [sp, #20]
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	a902      	add	r1, sp, #8
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	f000 f868 	bl	8002d84 <_svfiprintf_r>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	9b02      	ldr	r3, [sp, #8]
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	b01c      	add	sp, #112	; 0x70
 8002cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cc0:	b003      	add	sp, #12
 8002cc2:	4770      	bx	lr
 8002cc4:	20000014 	.word	0x20000014
 8002cc8:	ffff0208 	.word	0xffff0208

08002ccc <__ssputs_r>:
 8002ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd0:	688e      	ldr	r6, [r1, #8]
 8002cd2:	4682      	mov	sl, r0
 8002cd4:	429e      	cmp	r6, r3
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4690      	mov	r8, r2
 8002cda:	461f      	mov	r7, r3
 8002cdc:	d838      	bhi.n	8002d50 <__ssputs_r+0x84>
 8002cde:	898a      	ldrh	r2, [r1, #12]
 8002ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ce4:	d032      	beq.n	8002d4c <__ssputs_r+0x80>
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	6909      	ldr	r1, [r1, #16]
 8002cea:	3301      	adds	r3, #1
 8002cec:	eba5 0901 	sub.w	r9, r5, r1
 8002cf0:	6965      	ldr	r5, [r4, #20]
 8002cf2:	444b      	add	r3, r9
 8002cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cfc:	106d      	asrs	r5, r5, #1
 8002cfe:	429d      	cmp	r5, r3
 8002d00:	bf38      	it	cc
 8002d02:	461d      	movcc	r5, r3
 8002d04:	0553      	lsls	r3, r2, #21
 8002d06:	d531      	bpl.n	8002d6c <__ssputs_r+0xa0>
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f000 fb6f 	bl	80033ec <_malloc_r>
 8002d0e:	4606      	mov	r6, r0
 8002d10:	b950      	cbnz	r0, 8002d28 <__ssputs_r+0x5c>
 8002d12:	230c      	movs	r3, #12
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f8ca 3000 	str.w	r3, [sl]
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	464a      	mov	r2, r9
 8002d2a:	6921      	ldr	r1, [r4, #16]
 8002d2c:	f000 face 	bl	80032cc <memcpy>
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	6126      	str	r6, [r4, #16]
 8002d3e:	444e      	add	r6, r9
 8002d40:	6026      	str	r6, [r4, #0]
 8002d42:	463e      	mov	r6, r7
 8002d44:	6165      	str	r5, [r4, #20]
 8002d46:	eba5 0509 	sub.w	r5, r5, r9
 8002d4a:	60a5      	str	r5, [r4, #8]
 8002d4c:	42be      	cmp	r6, r7
 8002d4e:	d900      	bls.n	8002d52 <__ssputs_r+0x86>
 8002d50:	463e      	mov	r6, r7
 8002d52:	4632      	mov	r2, r6
 8002d54:	4641      	mov	r1, r8
 8002d56:	6820      	ldr	r0, [r4, #0]
 8002d58:	f000 fac6 	bl	80032e8 <memmove>
 8002d5c:	68a3      	ldr	r3, [r4, #8]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	1b9b      	subs	r3, r3, r6
 8002d62:	60a3      	str	r3, [r4, #8]
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	4433      	add	r3, r6
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	e7db      	b.n	8002d24 <__ssputs_r+0x58>
 8002d6c:	462a      	mov	r2, r5
 8002d6e:	f000 fbb1 	bl	80034d4 <_realloc_r>
 8002d72:	4606      	mov	r6, r0
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d1e1      	bne.n	8002d3c <__ssputs_r+0x70>
 8002d78:	4650      	mov	r0, sl
 8002d7a:	6921      	ldr	r1, [r4, #16]
 8002d7c:	f000 face 	bl	800331c <_free_r>
 8002d80:	e7c7      	b.n	8002d12 <__ssputs_r+0x46>
	...

08002d84 <_svfiprintf_r>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	4698      	mov	r8, r3
 8002d8a:	898b      	ldrh	r3, [r1, #12]
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	460d      	mov	r5, r1
 8002d92:	4614      	mov	r4, r2
 8002d94:	b09d      	sub	sp, #116	; 0x74
 8002d96:	d50e      	bpl.n	8002db6 <_svfiprintf_r+0x32>
 8002d98:	690b      	ldr	r3, [r1, #16]
 8002d9a:	b963      	cbnz	r3, 8002db6 <_svfiprintf_r+0x32>
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	f000 fb25 	bl	80033ec <_malloc_r>
 8002da2:	6028      	str	r0, [r5, #0]
 8002da4:	6128      	str	r0, [r5, #16]
 8002da6:	b920      	cbnz	r0, 8002db2 <_svfiprintf_r+0x2e>
 8002da8:	230c      	movs	r3, #12
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	e0d1      	b.n	8002f56 <_svfiprintf_r+0x1d2>
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	616b      	str	r3, [r5, #20]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dba:	2320      	movs	r3, #32
 8002dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dc0:	2330      	movs	r3, #48	; 0x30
 8002dc2:	f04f 0901 	mov.w	r9, #1
 8002dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f70 <_svfiprintf_r+0x1ec>
 8002dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	469a      	mov	sl, r3
 8002dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dda:	b10a      	cbz	r2, 8002de0 <_svfiprintf_r+0x5c>
 8002ddc:	2a25      	cmp	r2, #37	; 0x25
 8002dde:	d1f9      	bne.n	8002dd4 <_svfiprintf_r+0x50>
 8002de0:	ebba 0b04 	subs.w	fp, sl, r4
 8002de4:	d00b      	beq.n	8002dfe <_svfiprintf_r+0x7a>
 8002de6:	465b      	mov	r3, fp
 8002de8:	4622      	mov	r2, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	4638      	mov	r0, r7
 8002dee:	f7ff ff6d 	bl	8002ccc <__ssputs_r>
 8002df2:	3001      	adds	r0, #1
 8002df4:	f000 80aa 	beq.w	8002f4c <_svfiprintf_r+0x1c8>
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dfa:	445a      	add	r2, fp
 8002dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a2 	beq.w	8002f4c <_svfiprintf_r+0x1c8>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e12:	f10a 0a01 	add.w	sl, sl, #1
 8002e16:	9304      	str	r3, [sp, #16]
 8002e18:	9307      	str	r3, [sp, #28]
 8002e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e20:	4654      	mov	r4, sl
 8002e22:	2205      	movs	r2, #5
 8002e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e28:	4851      	ldr	r0, [pc, #324]	; (8002f70 <_svfiprintf_r+0x1ec>)
 8002e2a:	f000 fa41 	bl	80032b0 <memchr>
 8002e2e:	9a04      	ldr	r2, [sp, #16]
 8002e30:	b9d8      	cbnz	r0, 8002e6a <_svfiprintf_r+0xe6>
 8002e32:	06d0      	lsls	r0, r2, #27
 8002e34:	bf44      	itt	mi
 8002e36:	2320      	movmi	r3, #32
 8002e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3c:	0711      	lsls	r1, r2, #28
 8002e3e:	bf44      	itt	mi
 8002e40:	232b      	movmi	r3, #43	; 0x2b
 8002e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4c:	d015      	beq.n	8002e7a <_svfiprintf_r+0xf6>
 8002e4e:	4654      	mov	r4, sl
 8002e50:	2000      	movs	r0, #0
 8002e52:	f04f 0c0a 	mov.w	ip, #10
 8002e56:	9a07      	ldr	r2, [sp, #28]
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5e:	3b30      	subs	r3, #48	; 0x30
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d94e      	bls.n	8002f02 <_svfiprintf_r+0x17e>
 8002e64:	b1b0      	cbz	r0, 8002e94 <_svfiprintf_r+0x110>
 8002e66:	9207      	str	r2, [sp, #28]
 8002e68:	e014      	b.n	8002e94 <_svfiprintf_r+0x110>
 8002e6a:	eba0 0308 	sub.w	r3, r0, r8
 8002e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	46a2      	mov	sl, r4
 8002e76:	9304      	str	r3, [sp, #16]
 8002e78:	e7d2      	b.n	8002e20 <_svfiprintf_r+0x9c>
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9103      	str	r1, [sp, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfbb      	ittet	lt
 8002e86:	425b      	neglt	r3, r3
 8002e88:	f042 0202 	orrlt.w	r2, r2, #2
 8002e8c:	9307      	strge	r3, [sp, #28]
 8002e8e:	9307      	strlt	r3, [sp, #28]
 8002e90:	bfb8      	it	lt
 8002e92:	9204      	strlt	r2, [sp, #16]
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	2b2e      	cmp	r3, #46	; 0x2e
 8002e98:	d10c      	bne.n	8002eb4 <_svfiprintf_r+0x130>
 8002e9a:	7863      	ldrb	r3, [r4, #1]
 8002e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9e:	d135      	bne.n	8002f0c <_svfiprintf_r+0x188>
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	3402      	adds	r4, #2
 8002ea4:	1d1a      	adds	r2, r3, #4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	9203      	str	r2, [sp, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfb8      	it	lt
 8002eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eb2:	9305      	str	r3, [sp, #20]
 8002eb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f74 <_svfiprintf_r+0x1f0>
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4650      	mov	r0, sl
 8002ebc:	7821      	ldrb	r1, [r4, #0]
 8002ebe:	f000 f9f7 	bl	80032b0 <memchr>
 8002ec2:	b140      	cbz	r0, 8002ed6 <_svfiprintf_r+0x152>
 8002ec4:	2340      	movs	r3, #64	; 0x40
 8002ec6:	eba0 000a 	sub.w	r0, r0, sl
 8002eca:	fa03 f000 	lsl.w	r0, r3, r0
 8002ece:	9b04      	ldr	r3, [sp, #16]
 8002ed0:	3401      	adds	r4, #1
 8002ed2:	4303      	orrs	r3, r0
 8002ed4:	9304      	str	r3, [sp, #16]
 8002ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eda:	2206      	movs	r2, #6
 8002edc:	4826      	ldr	r0, [pc, #152]	; (8002f78 <_svfiprintf_r+0x1f4>)
 8002ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ee2:	f000 f9e5 	bl	80032b0 <memchr>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d038      	beq.n	8002f5c <_svfiprintf_r+0x1d8>
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <_svfiprintf_r+0x1f8>)
 8002eec:	bb1b      	cbnz	r3, 8002f36 <_svfiprintf_r+0x1b2>
 8002eee:	9b03      	ldr	r3, [sp, #12]
 8002ef0:	3307      	adds	r3, #7
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efc:	4433      	add	r3, r6
 8002efe:	9309      	str	r3, [sp, #36]	; 0x24
 8002f00:	e767      	b.n	8002dd2 <_svfiprintf_r+0x4e>
 8002f02:	460c      	mov	r4, r1
 8002f04:	2001      	movs	r0, #1
 8002f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f0a:	e7a5      	b.n	8002e58 <_svfiprintf_r+0xd4>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f04f 0c0a 	mov.w	ip, #10
 8002f12:	4619      	mov	r1, r3
 8002f14:	3401      	adds	r4, #1
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1e:	3a30      	subs	r2, #48	; 0x30
 8002f20:	2a09      	cmp	r2, #9
 8002f22:	d903      	bls.n	8002f2c <_svfiprintf_r+0x1a8>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0c5      	beq.n	8002eb4 <_svfiprintf_r+0x130>
 8002f28:	9105      	str	r1, [sp, #20]
 8002f2a:	e7c3      	b.n	8002eb4 <_svfiprintf_r+0x130>
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	2301      	movs	r3, #1
 8002f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f34:	e7f0      	b.n	8002f18 <_svfiprintf_r+0x194>
 8002f36:	ab03      	add	r3, sp, #12
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <_svfiprintf_r+0x1fc>)
 8002f40:	a904      	add	r1, sp, #16
 8002f42:	f3af 8000 	nop.w
 8002f46:	1c42      	adds	r2, r0, #1
 8002f48:	4606      	mov	r6, r0
 8002f4a:	d1d6      	bne.n	8002efa <_svfiprintf_r+0x176>
 8002f4c:	89ab      	ldrh	r3, [r5, #12]
 8002f4e:	065b      	lsls	r3, r3, #25
 8002f50:	f53f af2c 	bmi.w	8002dac <_svfiprintf_r+0x28>
 8002f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f56:	b01d      	add	sp, #116	; 0x74
 8002f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5c:	ab03      	add	r3, sp, #12
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	462a      	mov	r2, r5
 8002f62:	4638      	mov	r0, r7
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <_svfiprintf_r+0x1fc>)
 8002f66:	a904      	add	r1, sp, #16
 8002f68:	f000 f87c 	bl	8003064 <_printf_i>
 8002f6c:	e7eb      	b.n	8002f46 <_svfiprintf_r+0x1c2>
 8002f6e:	bf00      	nop
 8002f70:	080035f4 	.word	0x080035f4
 8002f74:	080035fa 	.word	0x080035fa
 8002f78:	080035fe 	.word	0x080035fe
 8002f7c:	00000000 	.word	0x00000000
 8002f80:	08002ccd 	.word	0x08002ccd

08002f84 <_printf_common>:
 8002f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	4616      	mov	r6, r2
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	688a      	ldr	r2, [r1, #8]
 8002f8e:	690b      	ldr	r3, [r1, #16]
 8002f90:	4607      	mov	r7, r0
 8002f92:	4293      	cmp	r3, r2
 8002f94:	bfb8      	it	lt
 8002f96:	4613      	movlt	r3, r2
 8002f98:	6033      	str	r3, [r6, #0]
 8002f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fa4:	b10a      	cbz	r2, 8002faa <_printf_common+0x26>
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	0699      	lsls	r1, r3, #26
 8002fae:	bf42      	ittt	mi
 8002fb0:	6833      	ldrmi	r3, [r6, #0]
 8002fb2:	3302      	addmi	r3, #2
 8002fb4:	6033      	strmi	r3, [r6, #0]
 8002fb6:	6825      	ldr	r5, [r4, #0]
 8002fb8:	f015 0506 	ands.w	r5, r5, #6
 8002fbc:	d106      	bne.n	8002fcc <_printf_common+0x48>
 8002fbe:	f104 0a19 	add.w	sl, r4, #25
 8002fc2:	68e3      	ldr	r3, [r4, #12]
 8002fc4:	6832      	ldr	r2, [r6, #0]
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	42ab      	cmp	r3, r5
 8002fca:	dc28      	bgt.n	800301e <_printf_common+0x9a>
 8002fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fd0:	1e13      	subs	r3, r2, #0
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	bf18      	it	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	0692      	lsls	r2, r2, #26
 8002fda:	d42d      	bmi.n	8003038 <_printf_common+0xb4>
 8002fdc:	4649      	mov	r1, r9
 8002fde:	4638      	mov	r0, r7
 8002fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fe4:	47c0      	blx	r8
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d020      	beq.n	800302c <_printf_common+0xa8>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	68e5      	ldr	r5, [r4, #12]
 8002fee:	f003 0306 	and.w	r3, r3, #6
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf18      	it	ne
 8002ff6:	2500      	movne	r5, #0
 8002ff8:	6832      	ldr	r2, [r6, #0]
 8002ffa:	f04f 0600 	mov.w	r6, #0
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	bf08      	it	eq
 8003002:	1aad      	subeq	r5, r5, r2
 8003004:	6922      	ldr	r2, [r4, #16]
 8003006:	bf08      	it	eq
 8003008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800300c:	4293      	cmp	r3, r2
 800300e:	bfc4      	itt	gt
 8003010:	1a9b      	subgt	r3, r3, r2
 8003012:	18ed      	addgt	r5, r5, r3
 8003014:	341a      	adds	r4, #26
 8003016:	42b5      	cmp	r5, r6
 8003018:	d11a      	bne.n	8003050 <_printf_common+0xcc>
 800301a:	2000      	movs	r0, #0
 800301c:	e008      	b.n	8003030 <_printf_common+0xac>
 800301e:	2301      	movs	r3, #1
 8003020:	4652      	mov	r2, sl
 8003022:	4649      	mov	r1, r9
 8003024:	4638      	mov	r0, r7
 8003026:	47c0      	blx	r8
 8003028:	3001      	adds	r0, #1
 800302a:	d103      	bne.n	8003034 <_printf_common+0xb0>
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003034:	3501      	adds	r5, #1
 8003036:	e7c4      	b.n	8002fc2 <_printf_common+0x3e>
 8003038:	2030      	movs	r0, #48	; 0x30
 800303a:	18e1      	adds	r1, r4, r3
 800303c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003046:	4422      	add	r2, r4
 8003048:	3302      	adds	r3, #2
 800304a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800304e:	e7c5      	b.n	8002fdc <_printf_common+0x58>
 8003050:	2301      	movs	r3, #1
 8003052:	4622      	mov	r2, r4
 8003054:	4649      	mov	r1, r9
 8003056:	4638      	mov	r0, r7
 8003058:	47c0      	blx	r8
 800305a:	3001      	adds	r0, #1
 800305c:	d0e6      	beq.n	800302c <_printf_common+0xa8>
 800305e:	3601      	adds	r6, #1
 8003060:	e7d9      	b.n	8003016 <_printf_common+0x92>
	...

08003064 <_printf_i>:
 8003064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	7e0f      	ldrb	r7, [r1, #24]
 800306a:	4691      	mov	r9, r2
 800306c:	2f78      	cmp	r7, #120	; 0x78
 800306e:	4680      	mov	r8, r0
 8003070:	460c      	mov	r4, r1
 8003072:	469a      	mov	sl, r3
 8003074:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800307a:	d807      	bhi.n	800308c <_printf_i+0x28>
 800307c:	2f62      	cmp	r7, #98	; 0x62
 800307e:	d80a      	bhi.n	8003096 <_printf_i+0x32>
 8003080:	2f00      	cmp	r7, #0
 8003082:	f000 80d9 	beq.w	8003238 <_printf_i+0x1d4>
 8003086:	2f58      	cmp	r7, #88	; 0x58
 8003088:	f000 80a4 	beq.w	80031d4 <_printf_i+0x170>
 800308c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003094:	e03a      	b.n	800310c <_printf_i+0xa8>
 8003096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800309a:	2b15      	cmp	r3, #21
 800309c:	d8f6      	bhi.n	800308c <_printf_i+0x28>
 800309e:	a101      	add	r1, pc, #4	; (adr r1, 80030a4 <_printf_i+0x40>)
 80030a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030a4:	080030fd 	.word	0x080030fd
 80030a8:	08003111 	.word	0x08003111
 80030ac:	0800308d 	.word	0x0800308d
 80030b0:	0800308d 	.word	0x0800308d
 80030b4:	0800308d 	.word	0x0800308d
 80030b8:	0800308d 	.word	0x0800308d
 80030bc:	08003111 	.word	0x08003111
 80030c0:	0800308d 	.word	0x0800308d
 80030c4:	0800308d 	.word	0x0800308d
 80030c8:	0800308d 	.word	0x0800308d
 80030cc:	0800308d 	.word	0x0800308d
 80030d0:	0800321f 	.word	0x0800321f
 80030d4:	08003141 	.word	0x08003141
 80030d8:	08003201 	.word	0x08003201
 80030dc:	0800308d 	.word	0x0800308d
 80030e0:	0800308d 	.word	0x0800308d
 80030e4:	08003241 	.word	0x08003241
 80030e8:	0800308d 	.word	0x0800308d
 80030ec:	08003141 	.word	0x08003141
 80030f0:	0800308d 	.word	0x0800308d
 80030f4:	0800308d 	.word	0x0800308d
 80030f8:	08003209 	.word	0x08003209
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	1d1a      	adds	r2, r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	602a      	str	r2, [r5, #0]
 8003104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800310c:	2301      	movs	r3, #1
 800310e:	e0a4      	b.n	800325a <_printf_i+0x1f6>
 8003110:	6820      	ldr	r0, [r4, #0]
 8003112:	6829      	ldr	r1, [r5, #0]
 8003114:	0606      	lsls	r6, r0, #24
 8003116:	f101 0304 	add.w	r3, r1, #4
 800311a:	d50a      	bpl.n	8003132 <_printf_i+0xce>
 800311c:	680e      	ldr	r6, [r1, #0]
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	2e00      	cmp	r6, #0
 8003122:	da03      	bge.n	800312c <_printf_i+0xc8>
 8003124:	232d      	movs	r3, #45	; 0x2d
 8003126:	4276      	negs	r6, r6
 8003128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800312c:	230a      	movs	r3, #10
 800312e:	485e      	ldr	r0, [pc, #376]	; (80032a8 <_printf_i+0x244>)
 8003130:	e019      	b.n	8003166 <_printf_i+0x102>
 8003132:	680e      	ldr	r6, [r1, #0]
 8003134:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	bf18      	it	ne
 800313c:	b236      	sxthne	r6, r6
 800313e:	e7ef      	b.n	8003120 <_printf_i+0xbc>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	1d19      	adds	r1, r3, #4
 8003146:	6029      	str	r1, [r5, #0]
 8003148:	0601      	lsls	r1, r0, #24
 800314a:	d501      	bpl.n	8003150 <_printf_i+0xec>
 800314c:	681e      	ldr	r6, [r3, #0]
 800314e:	e002      	b.n	8003156 <_printf_i+0xf2>
 8003150:	0646      	lsls	r6, r0, #25
 8003152:	d5fb      	bpl.n	800314c <_printf_i+0xe8>
 8003154:	881e      	ldrh	r6, [r3, #0]
 8003156:	2f6f      	cmp	r7, #111	; 0x6f
 8003158:	bf0c      	ite	eq
 800315a:	2308      	moveq	r3, #8
 800315c:	230a      	movne	r3, #10
 800315e:	4852      	ldr	r0, [pc, #328]	; (80032a8 <_printf_i+0x244>)
 8003160:	2100      	movs	r1, #0
 8003162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003166:	6865      	ldr	r5, [r4, #4]
 8003168:	2d00      	cmp	r5, #0
 800316a:	bfa8      	it	ge
 800316c:	6821      	ldrge	r1, [r4, #0]
 800316e:	60a5      	str	r5, [r4, #8]
 8003170:	bfa4      	itt	ge
 8003172:	f021 0104 	bicge.w	r1, r1, #4
 8003176:	6021      	strge	r1, [r4, #0]
 8003178:	b90e      	cbnz	r6, 800317e <_printf_i+0x11a>
 800317a:	2d00      	cmp	r5, #0
 800317c:	d04d      	beq.n	800321a <_printf_i+0x1b6>
 800317e:	4615      	mov	r5, r2
 8003180:	fbb6 f1f3 	udiv	r1, r6, r3
 8003184:	fb03 6711 	mls	r7, r3, r1, r6
 8003188:	5dc7      	ldrb	r7, [r0, r7]
 800318a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800318e:	4637      	mov	r7, r6
 8003190:	42bb      	cmp	r3, r7
 8003192:	460e      	mov	r6, r1
 8003194:	d9f4      	bls.n	8003180 <_printf_i+0x11c>
 8003196:	2b08      	cmp	r3, #8
 8003198:	d10b      	bne.n	80031b2 <_printf_i+0x14e>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	07de      	lsls	r6, r3, #31
 800319e:	d508      	bpl.n	80031b2 <_printf_i+0x14e>
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	6861      	ldr	r1, [r4, #4]
 80031a4:	4299      	cmp	r1, r3
 80031a6:	bfde      	ittt	le
 80031a8:	2330      	movle	r3, #48	; 0x30
 80031aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031b2:	1b52      	subs	r2, r2, r5
 80031b4:	6122      	str	r2, [r4, #16]
 80031b6:	464b      	mov	r3, r9
 80031b8:	4621      	mov	r1, r4
 80031ba:	4640      	mov	r0, r8
 80031bc:	f8cd a000 	str.w	sl, [sp]
 80031c0:	aa03      	add	r2, sp, #12
 80031c2:	f7ff fedf 	bl	8002f84 <_printf_common>
 80031c6:	3001      	adds	r0, #1
 80031c8:	d14c      	bne.n	8003264 <_printf_i+0x200>
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295
 80031ce:	b004      	add	sp, #16
 80031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d4:	4834      	ldr	r0, [pc, #208]	; (80032a8 <_printf_i+0x244>)
 80031d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031da:	6829      	ldr	r1, [r5, #0]
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	f851 6b04 	ldr.w	r6, [r1], #4
 80031e2:	6029      	str	r1, [r5, #0]
 80031e4:	061d      	lsls	r5, r3, #24
 80031e6:	d514      	bpl.n	8003212 <_printf_i+0x1ae>
 80031e8:	07df      	lsls	r7, r3, #31
 80031ea:	bf44      	itt	mi
 80031ec:	f043 0320 	orrmi.w	r3, r3, #32
 80031f0:	6023      	strmi	r3, [r4, #0]
 80031f2:	b91e      	cbnz	r6, 80031fc <_printf_i+0x198>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	f023 0320 	bic.w	r3, r3, #32
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	2310      	movs	r3, #16
 80031fe:	e7af      	b.n	8003160 <_printf_i+0xfc>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	2378      	movs	r3, #120	; 0x78
 800320a:	4828      	ldr	r0, [pc, #160]	; (80032ac <_printf_i+0x248>)
 800320c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003210:	e7e3      	b.n	80031da <_printf_i+0x176>
 8003212:	0659      	lsls	r1, r3, #25
 8003214:	bf48      	it	mi
 8003216:	b2b6      	uxthmi	r6, r6
 8003218:	e7e6      	b.n	80031e8 <_printf_i+0x184>
 800321a:	4615      	mov	r5, r2
 800321c:	e7bb      	b.n	8003196 <_printf_i+0x132>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	6826      	ldr	r6, [r4, #0]
 8003222:	1d18      	adds	r0, r3, #4
 8003224:	6961      	ldr	r1, [r4, #20]
 8003226:	6028      	str	r0, [r5, #0]
 8003228:	0635      	lsls	r5, r6, #24
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	d501      	bpl.n	8003232 <_printf_i+0x1ce>
 800322e:	6019      	str	r1, [r3, #0]
 8003230:	e002      	b.n	8003238 <_printf_i+0x1d4>
 8003232:	0670      	lsls	r0, r6, #25
 8003234:	d5fb      	bpl.n	800322e <_printf_i+0x1ca>
 8003236:	8019      	strh	r1, [r3, #0]
 8003238:	2300      	movs	r3, #0
 800323a:	4615      	mov	r5, r2
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	e7ba      	b.n	80031b6 <_printf_i+0x152>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	2100      	movs	r1, #0
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	602a      	str	r2, [r5, #0]
 8003248:	681d      	ldr	r5, [r3, #0]
 800324a:	6862      	ldr	r2, [r4, #4]
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f82f 	bl	80032b0 <memchr>
 8003252:	b108      	cbz	r0, 8003258 <_printf_i+0x1f4>
 8003254:	1b40      	subs	r0, r0, r5
 8003256:	6060      	str	r0, [r4, #4]
 8003258:	6863      	ldr	r3, [r4, #4]
 800325a:	6123      	str	r3, [r4, #16]
 800325c:	2300      	movs	r3, #0
 800325e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003262:	e7a8      	b.n	80031b6 <_printf_i+0x152>
 8003264:	462a      	mov	r2, r5
 8003266:	4649      	mov	r1, r9
 8003268:	4640      	mov	r0, r8
 800326a:	6923      	ldr	r3, [r4, #16]
 800326c:	47d0      	blx	sl
 800326e:	3001      	adds	r0, #1
 8003270:	d0ab      	beq.n	80031ca <_printf_i+0x166>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	079b      	lsls	r3, r3, #30
 8003276:	d413      	bmi.n	80032a0 <_printf_i+0x23c>
 8003278:	68e0      	ldr	r0, [r4, #12]
 800327a:	9b03      	ldr	r3, [sp, #12]
 800327c:	4298      	cmp	r0, r3
 800327e:	bfb8      	it	lt
 8003280:	4618      	movlt	r0, r3
 8003282:	e7a4      	b.n	80031ce <_printf_i+0x16a>
 8003284:	2301      	movs	r3, #1
 8003286:	4632      	mov	r2, r6
 8003288:	4649      	mov	r1, r9
 800328a:	4640      	mov	r0, r8
 800328c:	47d0      	blx	sl
 800328e:	3001      	adds	r0, #1
 8003290:	d09b      	beq.n	80031ca <_printf_i+0x166>
 8003292:	3501      	adds	r5, #1
 8003294:	68e3      	ldr	r3, [r4, #12]
 8003296:	9903      	ldr	r1, [sp, #12]
 8003298:	1a5b      	subs	r3, r3, r1
 800329a:	42ab      	cmp	r3, r5
 800329c:	dcf2      	bgt.n	8003284 <_printf_i+0x220>
 800329e:	e7eb      	b.n	8003278 <_printf_i+0x214>
 80032a0:	2500      	movs	r5, #0
 80032a2:	f104 0619 	add.w	r6, r4, #25
 80032a6:	e7f5      	b.n	8003294 <_printf_i+0x230>
 80032a8:	08003605 	.word	0x08003605
 80032ac:	08003616 	.word	0x08003616

080032b0 <memchr>:
 80032b0:	4603      	mov	r3, r0
 80032b2:	b510      	push	{r4, lr}
 80032b4:	b2c9      	uxtb	r1, r1
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	d101      	bne.n	80032c2 <memchr+0x12>
 80032be:	2000      	movs	r0, #0
 80032c0:	e003      	b.n	80032ca <memchr+0x1a>
 80032c2:	7804      	ldrb	r4, [r0, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	428c      	cmp	r4, r1
 80032c8:	d1f6      	bne.n	80032b8 <memchr+0x8>
 80032ca:	bd10      	pop	{r4, pc}

080032cc <memcpy>:
 80032cc:	440a      	add	r2, r1
 80032ce:	4291      	cmp	r1, r2
 80032d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80032d4:	d100      	bne.n	80032d8 <memcpy+0xc>
 80032d6:	4770      	bx	lr
 80032d8:	b510      	push	{r4, lr}
 80032da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032de:	4291      	cmp	r1, r2
 80032e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032e4:	d1f9      	bne.n	80032da <memcpy+0xe>
 80032e6:	bd10      	pop	{r4, pc}

080032e8 <memmove>:
 80032e8:	4288      	cmp	r0, r1
 80032ea:	b510      	push	{r4, lr}
 80032ec:	eb01 0402 	add.w	r4, r1, r2
 80032f0:	d902      	bls.n	80032f8 <memmove+0x10>
 80032f2:	4284      	cmp	r4, r0
 80032f4:	4623      	mov	r3, r4
 80032f6:	d807      	bhi.n	8003308 <memmove+0x20>
 80032f8:	1e43      	subs	r3, r0, #1
 80032fa:	42a1      	cmp	r1, r4
 80032fc:	d008      	beq.n	8003310 <memmove+0x28>
 80032fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003306:	e7f8      	b.n	80032fa <memmove+0x12>
 8003308:	4601      	mov	r1, r0
 800330a:	4402      	add	r2, r0
 800330c:	428a      	cmp	r2, r1
 800330e:	d100      	bne.n	8003312 <memmove+0x2a>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800331a:	e7f7      	b.n	800330c <memmove+0x24>

0800331c <_free_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4605      	mov	r5, r0
 8003320:	2900      	cmp	r1, #0
 8003322:	d040      	beq.n	80033a6 <_free_r+0x8a>
 8003324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003328:	1f0c      	subs	r4, r1, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	bfb8      	it	lt
 800332e:	18e4      	addlt	r4, r4, r3
 8003330:	f000 f910 	bl	8003554 <__malloc_lock>
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <_free_r+0x8c>)
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	b933      	cbnz	r3, 8003348 <_free_r+0x2c>
 800333a:	6063      	str	r3, [r4, #4]
 800333c:	6014      	str	r4, [r2, #0]
 800333e:	4628      	mov	r0, r5
 8003340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003344:	f000 b90c 	b.w	8003560 <__malloc_unlock>
 8003348:	42a3      	cmp	r3, r4
 800334a:	d908      	bls.n	800335e <_free_r+0x42>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	1821      	adds	r1, r4, r0
 8003350:	428b      	cmp	r3, r1
 8003352:	bf01      	itttt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	1809      	addeq	r1, r1, r0
 800335a:	6021      	streq	r1, [r4, #0]
 800335c:	e7ed      	b.n	800333a <_free_r+0x1e>
 800335e:	461a      	mov	r2, r3
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b10b      	cbz	r3, 8003368 <_free_r+0x4c>
 8003364:	42a3      	cmp	r3, r4
 8003366:	d9fa      	bls.n	800335e <_free_r+0x42>
 8003368:	6811      	ldr	r1, [r2, #0]
 800336a:	1850      	adds	r0, r2, r1
 800336c:	42a0      	cmp	r0, r4
 800336e:	d10b      	bne.n	8003388 <_free_r+0x6c>
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	4401      	add	r1, r0
 8003374:	1850      	adds	r0, r2, r1
 8003376:	4283      	cmp	r3, r0
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	d1e0      	bne.n	800333e <_free_r+0x22>
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4401      	add	r1, r0
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	6053      	str	r3, [r2, #4]
 8003386:	e7da      	b.n	800333e <_free_r+0x22>
 8003388:	d902      	bls.n	8003390 <_free_r+0x74>
 800338a:	230c      	movs	r3, #12
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	e7d6      	b.n	800333e <_free_r+0x22>
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	1821      	adds	r1, r4, r0
 8003394:	428b      	cmp	r3, r1
 8003396:	bf01      	itttt	eq
 8003398:	6819      	ldreq	r1, [r3, #0]
 800339a:	685b      	ldreq	r3, [r3, #4]
 800339c:	1809      	addeq	r1, r1, r0
 800339e:	6021      	streq	r1, [r4, #0]
 80033a0:	6063      	str	r3, [r4, #4]
 80033a2:	6054      	str	r4, [r2, #4]
 80033a4:	e7cb      	b.n	800333e <_free_r+0x22>
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	20000118 	.word	0x20000118

080033ac <sbrk_aligned>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4e0e      	ldr	r6, [pc, #56]	; (80033e8 <sbrk_aligned+0x3c>)
 80033b0:	460c      	mov	r4, r1
 80033b2:	6831      	ldr	r1, [r6, #0]
 80033b4:	4605      	mov	r5, r0
 80033b6:	b911      	cbnz	r1, 80033be <sbrk_aligned+0x12>
 80033b8:	f000 f8bc 	bl	8003534 <_sbrk_r>
 80033bc:	6030      	str	r0, [r6, #0]
 80033be:	4621      	mov	r1, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	f000 f8b7 	bl	8003534 <_sbrk_r>
 80033c6:	1c43      	adds	r3, r0, #1
 80033c8:	d00a      	beq.n	80033e0 <sbrk_aligned+0x34>
 80033ca:	1cc4      	adds	r4, r0, #3
 80033cc:	f024 0403 	bic.w	r4, r4, #3
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d007      	beq.n	80033e4 <sbrk_aligned+0x38>
 80033d4:	1a21      	subs	r1, r4, r0
 80033d6:	4628      	mov	r0, r5
 80033d8:	f000 f8ac 	bl	8003534 <_sbrk_r>
 80033dc:	3001      	adds	r0, #1
 80033de:	d101      	bne.n	80033e4 <sbrk_aligned+0x38>
 80033e0:	f04f 34ff 	mov.w	r4, #4294967295
 80033e4:	4620      	mov	r0, r4
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	2000011c 	.word	0x2000011c

080033ec <_malloc_r>:
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	1ccd      	adds	r5, r1, #3
 80033f2:	f025 0503 	bic.w	r5, r5, #3
 80033f6:	3508      	adds	r5, #8
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	bf38      	it	cc
 80033fc:	250c      	movcc	r5, #12
 80033fe:	2d00      	cmp	r5, #0
 8003400:	4607      	mov	r7, r0
 8003402:	db01      	blt.n	8003408 <_malloc_r+0x1c>
 8003404:	42a9      	cmp	r1, r5
 8003406:	d905      	bls.n	8003414 <_malloc_r+0x28>
 8003408:	230c      	movs	r3, #12
 800340a:	2600      	movs	r6, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4630      	mov	r0, r6
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003414:	4e2e      	ldr	r6, [pc, #184]	; (80034d0 <_malloc_r+0xe4>)
 8003416:	f000 f89d 	bl	8003554 <__malloc_lock>
 800341a:	6833      	ldr	r3, [r6, #0]
 800341c:	461c      	mov	r4, r3
 800341e:	bb34      	cbnz	r4, 800346e <_malloc_r+0x82>
 8003420:	4629      	mov	r1, r5
 8003422:	4638      	mov	r0, r7
 8003424:	f7ff ffc2 	bl	80033ac <sbrk_aligned>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	4604      	mov	r4, r0
 800342c:	d14d      	bne.n	80034ca <_malloc_r+0xde>
 800342e:	6834      	ldr	r4, [r6, #0]
 8003430:	4626      	mov	r6, r4
 8003432:	2e00      	cmp	r6, #0
 8003434:	d140      	bne.n	80034b8 <_malloc_r+0xcc>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	4631      	mov	r1, r6
 800343a:	4638      	mov	r0, r7
 800343c:	eb04 0803 	add.w	r8, r4, r3
 8003440:	f000 f878 	bl	8003534 <_sbrk_r>
 8003444:	4580      	cmp	r8, r0
 8003446:	d13a      	bne.n	80034be <_malloc_r+0xd2>
 8003448:	6821      	ldr	r1, [r4, #0]
 800344a:	3503      	adds	r5, #3
 800344c:	1a6d      	subs	r5, r5, r1
 800344e:	f025 0503 	bic.w	r5, r5, #3
 8003452:	3508      	adds	r5, #8
 8003454:	2d0c      	cmp	r5, #12
 8003456:	bf38      	it	cc
 8003458:	250c      	movcc	r5, #12
 800345a:	4638      	mov	r0, r7
 800345c:	4629      	mov	r1, r5
 800345e:	f7ff ffa5 	bl	80033ac <sbrk_aligned>
 8003462:	3001      	adds	r0, #1
 8003464:	d02b      	beq.n	80034be <_malloc_r+0xd2>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	442b      	add	r3, r5
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	e00e      	b.n	800348c <_malloc_r+0xa0>
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	1b52      	subs	r2, r2, r5
 8003472:	d41e      	bmi.n	80034b2 <_malloc_r+0xc6>
 8003474:	2a0b      	cmp	r2, #11
 8003476:	d916      	bls.n	80034a6 <_malloc_r+0xba>
 8003478:	1961      	adds	r1, r4, r5
 800347a:	42a3      	cmp	r3, r4
 800347c:	6025      	str	r5, [r4, #0]
 800347e:	bf18      	it	ne
 8003480:	6059      	strne	r1, [r3, #4]
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	bf08      	it	eq
 8003486:	6031      	streq	r1, [r6, #0]
 8003488:	5162      	str	r2, [r4, r5]
 800348a:	604b      	str	r3, [r1, #4]
 800348c:	4638      	mov	r0, r7
 800348e:	f104 060b 	add.w	r6, r4, #11
 8003492:	f000 f865 	bl	8003560 <__malloc_unlock>
 8003496:	f026 0607 	bic.w	r6, r6, #7
 800349a:	1d23      	adds	r3, r4, #4
 800349c:	1af2      	subs	r2, r6, r3
 800349e:	d0b6      	beq.n	800340e <_malloc_r+0x22>
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	50a3      	str	r3, [r4, r2]
 80034a4:	e7b3      	b.n	800340e <_malloc_r+0x22>
 80034a6:	6862      	ldr	r2, [r4, #4]
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	bf0c      	ite	eq
 80034ac:	6032      	streq	r2, [r6, #0]
 80034ae:	605a      	strne	r2, [r3, #4]
 80034b0:	e7ec      	b.n	800348c <_malloc_r+0xa0>
 80034b2:	4623      	mov	r3, r4
 80034b4:	6864      	ldr	r4, [r4, #4]
 80034b6:	e7b2      	b.n	800341e <_malloc_r+0x32>
 80034b8:	4634      	mov	r4, r6
 80034ba:	6876      	ldr	r6, [r6, #4]
 80034bc:	e7b9      	b.n	8003432 <_malloc_r+0x46>
 80034be:	230c      	movs	r3, #12
 80034c0:	4638      	mov	r0, r7
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	f000 f84c 	bl	8003560 <__malloc_unlock>
 80034c8:	e7a1      	b.n	800340e <_malloc_r+0x22>
 80034ca:	6025      	str	r5, [r4, #0]
 80034cc:	e7de      	b.n	800348c <_malloc_r+0xa0>
 80034ce:	bf00      	nop
 80034d0:	20000118 	.word	0x20000118

080034d4 <_realloc_r>:
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	4680      	mov	r8, r0
 80034da:	4614      	mov	r4, r2
 80034dc:	460e      	mov	r6, r1
 80034de:	b921      	cbnz	r1, 80034ea <_realloc_r+0x16>
 80034e0:	4611      	mov	r1, r2
 80034e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e6:	f7ff bf81 	b.w	80033ec <_malloc_r>
 80034ea:	b92a      	cbnz	r2, 80034f8 <_realloc_r+0x24>
 80034ec:	f7ff ff16 	bl	800331c <_free_r>
 80034f0:	4625      	mov	r5, r4
 80034f2:	4628      	mov	r0, r5
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	f000 f838 	bl	800356c <_malloc_usable_size_r>
 80034fc:	4284      	cmp	r4, r0
 80034fe:	4607      	mov	r7, r0
 8003500:	d802      	bhi.n	8003508 <_realloc_r+0x34>
 8003502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003506:	d812      	bhi.n	800352e <_realloc_r+0x5a>
 8003508:	4621      	mov	r1, r4
 800350a:	4640      	mov	r0, r8
 800350c:	f7ff ff6e 	bl	80033ec <_malloc_r>
 8003510:	4605      	mov	r5, r0
 8003512:	2800      	cmp	r0, #0
 8003514:	d0ed      	beq.n	80034f2 <_realloc_r+0x1e>
 8003516:	42bc      	cmp	r4, r7
 8003518:	4622      	mov	r2, r4
 800351a:	4631      	mov	r1, r6
 800351c:	bf28      	it	cs
 800351e:	463a      	movcs	r2, r7
 8003520:	f7ff fed4 	bl	80032cc <memcpy>
 8003524:	4631      	mov	r1, r6
 8003526:	4640      	mov	r0, r8
 8003528:	f7ff fef8 	bl	800331c <_free_r>
 800352c:	e7e1      	b.n	80034f2 <_realloc_r+0x1e>
 800352e:	4635      	mov	r5, r6
 8003530:	e7df      	b.n	80034f2 <_realloc_r+0x1e>
	...

08003534 <_sbrk_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	2300      	movs	r3, #0
 8003538:	4d05      	ldr	r5, [pc, #20]	; (8003550 <_sbrk_r+0x1c>)
 800353a:	4604      	mov	r4, r0
 800353c:	4608      	mov	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd fc8c 	bl	8000e5c <_sbrk>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d102      	bne.n	800354e <_sbrk_r+0x1a>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	b103      	cbz	r3, 800354e <_sbrk_r+0x1a>
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000120 	.word	0x20000120

08003554 <__malloc_lock>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__malloc_lock+0x8>)
 8003556:	f000 b811 	b.w	800357c <__retarget_lock_acquire_recursive>
 800355a:	bf00      	nop
 800355c:	20000124 	.word	0x20000124

08003560 <__malloc_unlock>:
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <__malloc_unlock+0x8>)
 8003562:	f000 b80c 	b.w	800357e <__retarget_lock_release_recursive>
 8003566:	bf00      	nop
 8003568:	20000124 	.word	0x20000124

0800356c <_malloc_usable_size_r>:
 800356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003570:	1f18      	subs	r0, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfbc      	itt	lt
 8003576:	580b      	ldrlt	r3, [r1, r0]
 8003578:	18c0      	addlt	r0, r0, r3
 800357a:	4770      	bx	lr

0800357c <__retarget_lock_acquire_recursive>:
 800357c:	4770      	bx	lr

0800357e <__retarget_lock_release_recursive>:
 800357e:	4770      	bx	lr

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
