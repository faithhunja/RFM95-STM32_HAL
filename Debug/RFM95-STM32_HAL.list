
RFM95-STM32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b68  08004b68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004be0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004be0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091ee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213a  00000000  00000000  00029287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001811e  00000000  00000000  0002c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb07  00000000  00000000  000447be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e56  00000000  00000000  000502c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d511b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000d516c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004aa8 	.word	0x08004aa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004aa8 	.word	0x08004aa8

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b976 	b.w	8000454 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	4688      	mov	r8, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14d      	bne.n	800022c <__udivmoddi4+0xac>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d968      	bls.n	8000268 <__udivmoddi4+0xe8>
 8000196:	fab2 f282 	clz	r2, r2
 800019a:	b152      	cbz	r2, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa01 f302 	lsl.w	r3, r1, r2
 80001a0:	f1c2 0120 	rsb	r1, r2, #32
 80001a4:	fa20 f101 	lsr.w	r1, r0, r1
 80001a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ac:	ea41 0803 	orr.w	r8, r1, r3
 80001b0:	4094      	lsls	r4, r2
 80001b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ba:	fa1f fe8c 	uxth.w	lr, ip
 80001be:	fb01 8817 	mls	r8, r1, r7, r8
 80001c2:	fb07 f00e 	mul.w	r0, r7, lr
 80001c6:	0c23      	lsrs	r3, r4, #16
 80001c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001cc:	4298      	cmp	r0, r3
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0303 	adds.w	r3, ip, r3
 80001d4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001d8:	f080 811e 	bcs.w	8000418 <__udivmoddi4+0x298>
 80001dc:	4298      	cmp	r0, r3
 80001de:	f240 811b 	bls.w	8000418 <__udivmoddi4+0x298>
 80001e2:	3f02      	subs	r7, #2
 80001e4:	4463      	add	r3, ip
 80001e6:	1a1b      	subs	r3, r3, r0
 80001e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001ec:	fb01 3310 	mls	r3, r1, r0, r3
 80001f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001fa:	45a6      	cmp	lr, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 33ff 	add.w	r3, r0, #4294967295
 8000206:	f080 8109 	bcs.w	800041c <__udivmoddi4+0x29c>
 800020a:	45a6      	cmp	lr, r4
 800020c:	f240 8106 	bls.w	800041c <__udivmoddi4+0x29c>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	eba4 040e 	sub.w	r4, r4, lr
 800021a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021e:	b11e      	cbz	r6, 8000228 <__udivmoddi4+0xa8>
 8000220:	2300      	movs	r3, #0
 8000222:	40d4      	lsrs	r4, r2
 8000224:	e9c6 4300 	strd	r4, r3, [r6]
 8000228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022c:	428b      	cmp	r3, r1
 800022e:	d908      	bls.n	8000242 <__udivmoddi4+0xc2>
 8000230:	2e00      	cmp	r6, #0
 8000232:	f000 80ee 	beq.w	8000412 <__udivmoddi4+0x292>
 8000236:	2100      	movs	r1, #0
 8000238:	e9c6 0500 	strd	r0, r5, [r6]
 800023c:	4608      	mov	r0, r1
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d14a      	bne.n	80002e0 <__udivmoddi4+0x160>
 800024a:	42ab      	cmp	r3, r5
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xd4>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 80fc 	bhi.w	800044c <__udivmoddi4+0x2cc>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb65 0303 	sbc.w	r3, r5, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4698      	mov	r8, r3
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e2      	beq.n	8000228 <__udivmoddi4+0xa8>
 8000262:	e9c6 4800 	strd	r4, r8, [r6]
 8000266:	e7df      	b.n	8000228 <__udivmoddi4+0xa8>
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xec>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	f040 8091 	bne.w	8000398 <__udivmoddi4+0x218>
 8000276:	eba1 000c 	sub.w	r0, r1, ip
 800027a:	2101      	movs	r1, #1
 800027c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000280:	fa1f fe8c 	uxth.w	lr, ip
 8000284:	fbb0 f3f7 	udiv	r3, r0, r7
 8000288:	fb07 0013 	mls	r0, r7, r3, r0
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000292:	fb0e f003 	mul.w	r0, lr, r3
 8000296:	42a8      	cmp	r0, r5
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x12c>
 800029a:	eb1c 0505 	adds.w	r5, ip, r5
 800029e:	f103 38ff 	add.w	r8, r3, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x12a>
 80002a4:	42a8      	cmp	r0, r5
 80002a6:	f200 80ce 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 80002aa:	4643      	mov	r3, r8
 80002ac:	1a2d      	subs	r5, r5, r0
 80002ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80002b2:	fb07 5510 	mls	r5, r7, r0, r5
 80002b6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	45a6      	cmp	lr, r4
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x156>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x154>
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	f200 80b6 	bhi.w	8000440 <__udivmoddi4+0x2c0>
 80002d4:	4628      	mov	r0, r5
 80002d6:	eba4 040e 	sub.w	r4, r4, lr
 80002da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002de:	e79e      	b.n	800021e <__udivmoddi4+0x9e>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbba f8f9 	udiv	r8, sl, r9
 80002fa:	fa20 f307 	lsr.w	r3, r0, r7
 80002fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000302:	408d      	lsls	r5, r1
 8000304:	fa1f fe8c 	uxth.w	lr, ip
 8000308:	431d      	orrs	r5, r3
 800030a:	fa00 f301 	lsl.w	r3, r0, r1
 800030e:	fb08 f00e 	mul.w	r0, r8, lr
 8000312:	0c2c      	lsrs	r4, r5, #16
 8000314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000318:	42a0      	cmp	r0, r4
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90b      	bls.n	8000338 <__udivmoddi4+0x1b8>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f108 3aff 	add.w	sl, r8, #4294967295
 8000328:	f080 8088 	bcs.w	800043c <__udivmoddi4+0x2bc>
 800032c:	42a0      	cmp	r0, r4
 800032e:	f240 8085 	bls.w	800043c <__udivmoddi4+0x2bc>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	4464      	add	r4, ip
 8000338:	1a24      	subs	r4, r4, r0
 800033a:	fbb4 f0f9 	udiv	r0, r4, r9
 800033e:	fb09 4410 	mls	r4, r9, r0, r4
 8000342:	fb00 fe0e 	mul.w	lr, r0, lr
 8000346:	b2ad      	uxth	r5, r5
 8000348:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x1e2>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 35ff 	add.w	r5, r0, #4294967295
 8000358:	d26c      	bcs.n	8000434 <__udivmoddi4+0x2b4>
 800035a:	45a6      	cmp	lr, r4
 800035c:	d96a      	bls.n	8000434 <__udivmoddi4+0x2b4>
 800035e:	3802      	subs	r0, #2
 8000360:	4464      	add	r4, ip
 8000362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000366:	fba0 9502 	umull	r9, r5, r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	42ac      	cmp	r4, r5
 8000370:	46c8      	mov	r8, r9
 8000372:	46ae      	mov	lr, r5
 8000374:	d356      	bcc.n	8000424 <__udivmoddi4+0x2a4>
 8000376:	d053      	beq.n	8000420 <__udivmoddi4+0x2a0>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d069      	beq.n	8000450 <__udivmoddi4+0x2d0>
 800037c:	ebb3 0208 	subs.w	r2, r3, r8
 8000380:	eb64 040e 	sbc.w	r4, r4, lr
 8000384:	fa22 f301 	lsr.w	r3, r2, r1
 8000388:	fa04 f707 	lsl.w	r7, r4, r7
 800038c:	431f      	orrs	r7, r3
 800038e:	40cc      	lsrs	r4, r1
 8000390:	e9c6 7400 	strd	r7, r4, [r6]
 8000394:	2100      	movs	r1, #0
 8000396:	e747      	b.n	8000228 <__udivmoddi4+0xa8>
 8000398:	fa0c fc02 	lsl.w	ip, ip, r2
 800039c:	f1c2 0120 	rsb	r1, r2, #32
 80003a0:	fa25 f301 	lsr.w	r3, r5, r1
 80003a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ac:	4095      	lsls	r5, r2
 80003ae:	430d      	orrs	r5, r1
 80003b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b4:	fb07 3311 	mls	r3, r7, r1, r3
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	0c28      	lsrs	r0, r5, #16
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	fb01 f30e 	mul.w	r3, r1, lr
 80003c6:	4283      	cmp	r3, r0
 80003c8:	fa04 f402 	lsl.w	r4, r4, r2
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x260>
 80003ce:	eb1c 0000 	adds.w	r0, ip, r0
 80003d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003d6:	d22f      	bcs.n	8000438 <__udivmoddi4+0x2b8>
 80003d8:	4283      	cmp	r3, r0
 80003da:	d92d      	bls.n	8000438 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	4460      	add	r0, ip
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e6:	fb07 0013 	mls	r0, r7, r3, r0
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003f0:	fb03 f00e 	mul.w	r0, r3, lr
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x28a>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000400:	d216      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 8000402:	42a8      	cmp	r0, r5
 8000404:	d914      	bls.n	8000430 <__udivmoddi4+0x2b0>
 8000406:	3b02      	subs	r3, #2
 8000408:	4465      	add	r5, ip
 800040a:	1a28      	subs	r0, r5, r0
 800040c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000410:	e738      	b.n	8000284 <__udivmoddi4+0x104>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e707      	b.n	8000228 <__udivmoddi4+0xa8>
 8000418:	462f      	mov	r7, r5
 800041a:	e6e4      	b.n	80001e6 <__udivmoddi4+0x66>
 800041c:	4618      	mov	r0, r3
 800041e:	e6f9      	b.n	8000214 <__udivmoddi4+0x94>
 8000420:	454b      	cmp	r3, r9
 8000422:	d2a9      	bcs.n	8000378 <__udivmoddi4+0x1f8>
 8000424:	ebb9 0802 	subs.w	r8, r9, r2
 8000428:	eb65 0e0c 	sbc.w	lr, r5, ip
 800042c:	3801      	subs	r0, #1
 800042e:	e7a3      	b.n	8000378 <__udivmoddi4+0x1f8>
 8000430:	4643      	mov	r3, r8
 8000432:	e7ea      	b.n	800040a <__udivmoddi4+0x28a>
 8000434:	4628      	mov	r0, r5
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e2>
 8000438:	4641      	mov	r1, r8
 800043a:	e7d1      	b.n	80003e0 <__udivmoddi4+0x260>
 800043c:	46d0      	mov	r8, sl
 800043e:	e77b      	b.n	8000338 <__udivmoddi4+0x1b8>
 8000440:	4464      	add	r4, ip
 8000442:	3802      	subs	r0, #2
 8000444:	e747      	b.n	80002d6 <__udivmoddi4+0x156>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	e72f      	b.n	80002ac <__udivmoddi4+0x12c>
 800044c:	4608      	mov	r0, r1
 800044e:	e706      	b.n	800025e <__udivmoddi4+0xde>
 8000450:	4631      	mov	r1, r6
 8000452:	e6e9      	b.n	8000228 <__udivmoddi4+0xa8>

08000454 <__aeabi_idiv0>:
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_GPIO_Init+0x8c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x8c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <MX_GPIO_Init+0x8c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_GPIO_Init+0x8c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80004b4:	2308      	movs	r3, #8
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_GPIO_Init+0x90>)
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <MX_GPIO_Init+0x94>)
 80004c8:	f001 f87a 	bl	80015c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2009      	movs	r0, #9
 80004d2:	f000 ffb2 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80004d6:	2009      	movs	r0, #9
 80004d8:	f000 ffcb 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	10110000 	.word	0x10110000
 80004ec:	40010800 	.word	0x40010800

080004f0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000506:	b2db      	uxtb	r3, r3
 8000508:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6858      	ldr	r0, [r3, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	8adb      	ldrh	r3, [r3, #22]
 8000512:	2200      	movs	r2, #0
 8000514:	4619      	mov	r1, r3
 8000516:	f001 f9d7 	bl	80018c8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	1cf9      	adds	r1, r7, #3
 8000524:	2201      	movs	r2, #1
 8000526:	f002 fe5d 	bl	80031e4 <HAL_SPI_Transmit>
 800052a:	4603      	mov	r3, r0
 800052c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f107 010f 	add.w	r1, r7, #15
 800053a:	2201      	movs	r2, #1
 800053c:	f002 ff8e 	bl	800345c <HAL_SPI_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6858      	ldr	r0, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8adb      	ldrh	r3, [r3, #22]
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f001 f9ba 	bl	80018c8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
 800056a:	4613      	mov	r3, r2
 800056c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000574:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	8adb      	ldrh	r3, [r3, #22]
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	f001 f998 	bl	80018c8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f107 010a 	add.w	r1, r7, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	f002 fe1d 	bl	80031e4 <HAL_SPI_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8adb      	ldrh	r3, [r3, #22]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	f001 f985 	bl	80018c8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	4611      	mov	r1, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80005dc:	2300      	movs	r3, #0
 80005de:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6858      	ldr	r0, [r3, #4]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	8adb      	ldrh	r3, [r3, #22]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 f96c 	bl	80018c8 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f107 0117 	add.w	r1, r7, #23
 80005fc:	2201      	movs	r2, #1
 80005fe:	f002 fdf1 	bl	80031e4 <HAL_SPI_Transmit>
 8000602:	4603      	mov	r3, r0
 8000604:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10a      	bne.n	8000622 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	b292      	uxth	r2, r2
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f9d4 	bl	80039c4 <HAL_SPI_Receive_DMA>
 800061c:	4603      	mov	r3, r0
 800061e:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8000620:	e012      	b.n	8000648 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	b29a      	uxth	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	f002 ff14 	bl	800345c <HAL_SPI_Receive>
 8000634:	4603      	mov	r3, r0
 8000636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	8adb      	ldrh	r3, [r3, #22]
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	f001 f940 	bl	80018c8 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff78 	bl	800055e <write_register>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b2c      	cmp	r3, #44	; 0x2c
 8000688:	d801      	bhi.n	800068e <set_OCP+0x16>
    imax = 45;
 800068a:	232d      	movs	r3, #45	; 0x2d
 800068c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	2bf0      	cmp	r3, #240	; 0xf0
 8000692:	d901      	bls.n	8000698 <set_OCP+0x20>
    imax = 240;
 8000694:	23f0      	movs	r3, #240	; 0xf0
 8000696:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b81      	cmp	r3, #129	; 0x81
 800069c:	d809      	bhi.n	80006b2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	3b2d      	subs	r3, #45	; 0x2d
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <set_OCP+0x68>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1052      	asrs	r2, r2, #1
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e008      	b.n	80006c4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	331e      	adds	r3, #30
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <set_OCP+0x68>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1092      	asrs	r2, r2, #2
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	210b      	movs	r1, #11
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff44 	bl	800055e <write_register>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	66666667 	.word	0x66666667

080006e4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006ec:	211d      	movs	r1, #29
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fefe 	bl	80004f0 <read_register>
 80006f4:	4603      	mov	r3, r0
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	461c      	mov	r4, r3
 8000700:	4615      	mov	r5, r2
 8000702:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000706:	211e      	movs	r1, #30
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fef1 	bl	80004f0 <read_register>
 800070e:	4603      	mov	r3, r0
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000714:	2304      	movs	r3, #4
 8000716:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b0a      	cmp	r3, #10
 800071c:	d908      	bls.n	8000730 <set_low_data_rate_optimization+0x4c>
 800071e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000722:	1fd1      	subs	r1, r2, #7
 8000724:	430b      	orrs	r3, r1
 8000726:	d103      	bne.n	8000730 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	461a      	mov	r2, r3
 8000734:	2126      	movs	r1, #38	; 0x26
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff11 	bl	800055e <write_register>
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}

08000744 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800074c:	2100      	movs	r1, #0
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff7e 	bl	8000650 <set_mode>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7d5b      	ldrb	r3, [r3, #21]
 8000768:	461a      	mov	r2, r3
 800076a:	210f      	movs	r1, #15
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fef6 	bl	800055e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000772:	22f0      	movs	r2, #240	; 0xf0
 8000774:	2112      	movs	r1, #18
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fef1 	bl	800055e <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 800077c:	2105      	movs	r1, #5
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff66 	bl	8000650 <set_mode>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000794:	2101      	movs	r1, #1
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff5a 	bl	8000650 <set_mode>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80007ac:	211d      	movs	r1, #29
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fe9e 	bl	80004f0 <read_register>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	461a      	mov	r2, r3
 80007c4:	211d      	movs	r1, #29
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fec9 	bl	800055e <write_register>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10e      	bne.n	8000806 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	d901      	bls.n	80007f2 <lora_set_tx_power+0x1e>
      level = 15;
 80007ee:	230f      	movs	r3, #15
 80007f0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	2109      	movs	r1, #9
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fead 	bl	800055e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000804:	e02e      	b.n	8000864 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	2b14      	cmp	r3, #20
 800080a:	d901      	bls.n	8000810 <lora_set_tx_power+0x3c>
      level = 20;
 800080c:	2314      	movs	r3, #20
 800080e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d801      	bhi.n	800081a <lora_set_tx_power+0x46>
      level = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2b11      	cmp	r3, #17
 800081e:	d90c      	bls.n	800083a <lora_set_tx_power+0x66>
      level -= 3;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	3b03      	subs	r3, #3
 8000824:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000826:	2287      	movs	r2, #135	; 0x87
 8000828:	214d      	movs	r1, #77	; 0x4d
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fe97 	bl	800055e <write_register>
      set_OCP(lora, 140);
 8000830:	218c      	movs	r1, #140	; 0x8c
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff20 	bl	8000678 <set_OCP>
 8000838:	e008      	b.n	800084c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800083a:	2284      	movs	r2, #132	; 0x84
 800083c:	214d      	movs	r1, #77	; 0x4d
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe8d 	bl	800055e <write_register>
      set_OCP(lora, 97);
 8000844:	2161      	movs	r1, #97	; 0x61
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff16 	bl	8000678 <set_OCP>
    level -= 2;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	3b02      	subs	r3, #2
 8000850:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	2109      	movs	r1, #9
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fe7d 	bl	800055e <write_register>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	f04f 0100 	mov.w	r1, #0
 8000884:	04d9      	lsls	r1, r3, #19
 8000886:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800088a:	04d0      	lsls	r0, r2, #19
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <lora_set_frequency+0x88>)
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	f7ff fc5d 	bl	8000150 <__aeabi_uldivmod>
 8000896:	4602      	mov	r2, r0
 8000898:	460b      	mov	r3, r1
 800089a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800089e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008a2:	f04f 0200 	mov.w	r2, #0
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	0c02      	lsrs	r2, r0, #16
 80008ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b0:	0c0b      	lsrs	r3, r1, #16
 80008b2:	b2d3      	uxtb	r3, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	2106      	movs	r1, #6
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff fe50 	bl	800055e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	0a02      	lsrs	r2, r0, #8
 80008cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008d0:	0a0b      	lsrs	r3, r1, #8
 80008d2:	b2d3      	uxtb	r3, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	2107      	movs	r1, #7
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fe40 	bl	800055e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008de:	7c3b      	ldrb	r3, [r7, #16]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2108      	movs	r1, #8
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff fe3a 	bl	800055e <write_register>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	01e84800 	.word	0x01e84800

080008f8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b05      	cmp	r3, #5
 8000908:	d802      	bhi.n	8000910 <lora_set_spreading_factor+0x18>
    sf = 6;
 800090a:	2306      	movs	r3, #6
 800090c:	70fb      	strb	r3, [r7, #3]
 800090e:	e004      	b.n	800091a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b0c      	cmp	r3, #12
 8000914:	d901      	bls.n	800091a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000916:	230c      	movs	r3, #12
 8000918:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	2b06      	cmp	r3, #6
 800091e:	d10a      	bne.n	8000936 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000920:	22c5      	movs	r2, #197	; 0xc5
 8000922:	2131      	movs	r1, #49	; 0x31
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe1a 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800092a:	220c      	movs	r2, #12
 800092c:	2137      	movs	r1, #55	; 0x37
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fe15 	bl	800055e <write_register>
 8000934:	e009      	b.n	800094a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000936:	22c3      	movs	r2, #195	; 0xc3
 8000938:	2131      	movs	r1, #49	; 0x31
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe0f 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000940:	220a      	movs	r2, #10
 8000942:	2137      	movs	r1, #55	; 0x37
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fe0a 	bl	800055e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800094a:	211e      	movs	r1, #30
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fdcf 	bl	80004f0 <read_register>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	b25a      	sxtb	r2, r3
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	b25b      	sxtb	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b25b      	sxtb	r3, r3
 800096a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	461a      	mov	r2, r3
 8000970:	211e      	movs	r1, #30
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fdf3 	bl	800055e <write_register>

  set_low_data_rate_optimization(lora);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff feb3 	bl	80006e4 <set_low_data_rate_optimization>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2120      	movs	r1, #32
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fddd 	bl	800055e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	2121      	movs	r1, #33	; 0x21
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fdd3 	bl	800055e <write_register>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009c8:	2142      	movs	r1, #66	; 0x42
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd90 	bl	80004f0 <read_register>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80009e2:	2112      	movs	r1, #18
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fd83 	bl	80004f0 <read_register>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f4:	b2db      	uxtb	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000a06:	211d      	movs	r1, #29
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fd71 	bl	80004f0 <read_register>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000a1c:	2122      	movs	r1, #34	; 0x22
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd66 	bl	80004f0 <read_register>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e005      	b.n	8000a36 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000a2a:	2113      	movs	r1, #19
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fd5f 	bl	80004f0 <read_register>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000a50:	2306      	movs	r3, #6
 8000a52:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000a58:	2112      	movs	r1, #18
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fd48 	bl	80004f0 <read_register>
 8000a60:	4603      	mov	r3, r0
 8000a62:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000a64:	22f0      	movs	r2, #240	; 0xf0
 8000a66:	2112      	movs	r1, #18
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff fd78 	bl	800055e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000a6e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da02      	bge.n	8000a7c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000a76:	2302      	movs	r3, #2
 8000a78:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000a7a:	e030      	b.n	8000ade <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000a7c:	7d7b      	ldrb	r3, [r7, #21]
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02a      	beq.n	8000adc <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000a86:	7d7b      	ldrb	r3, [r7, #21]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000a90:	2303      	movs	r3, #3
 8000a92:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000a94:	e023      	b.n	8000ade <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000a96:	7d7b      	ldrb	r3, [r7, #21]
 8000a98:	f003 0320 	and.w	r3, r3, #32
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aa4:	e01b      	b.n	8000ade <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ffa9 	bl	80009fe <lora_pending_packet_length>
 8000aac:	4603      	mov	r3, r0
 8000aae:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd1c 	bl	80004f0 <read_register>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000abc:	7d3b      	ldrb	r3, [r7, #20]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	210d      	movs	r1, #13
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff fd4b 	bl	800055e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000acc:	7dba      	ldrb	r2, [r7, #22]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd78 	bl	80005c6 <read_fifo>
    res = LORA_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]
 8000ada:	e000      	b.n	8000ade <lora_receive_packet_base+0x9e>
  }

done:
 8000adc:	bf00      	nop
  if (error) {
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <lora_receive_packet_base+0xaa>
    *error = res;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	7dfa      	ldrb	r2, [r7, #23]
 8000ae8:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	2302      	movs	r3, #2
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff96 	bl	8000a40 <lora_receive_packet_base>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000b32:	e00b      	b.n	8000b4c <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ff50 	bl	80009da <lora_is_packet_available>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f000 fb7f 	bl	8001244 <HAL_Delay>
    elapsed++;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3ef      	bcc.n	8000b34 <lora_receive_packet_blocking+0x16>
 8000b54:	e000      	b.n	8000b58 <lora_receive_packet_blocking+0x3a>
      break;
 8000b56:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff ffc8 	bl	8000af4 <lora_receive_packet>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b8e:	6a3a      	ldr	r2, [r7, #32]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2201      	movs	r2, #1
 8000b98:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bac:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff06 	bl	80009c0 <lora_version>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d001      	beq.n	8000bc2 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e031      	b.n	8000c26 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fdbe 	bl	8000744 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fdbb 	bl	8000744 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fe4a 	bl	800086c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000bd8:	2107      	movs	r1, #7
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fe8c 	bl	80008f8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000be0:	210a      	movs	r1, #10
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fecf 	bl	8000986 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff fddb 	bl	80007a4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000bee:	210c      	movs	r1, #12
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fc7d 	bl	80004f0 <read_register>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000bfa:	7dbb      	ldrb	r3, [r7, #22]
 8000bfc:	f043 0303 	orr.w	r3, r3, #3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	210c      	movs	r1, #12
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fca9 	bl	800055e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	2126      	movs	r1, #38	; 0x26
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fca4 	bl	800055e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000c16:	2111      	movs	r1, #17
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fddb 	bl	80007d4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff fdb4 	bl	800078c <lora_mode_standby>

  return LORA_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 faa3 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */
  lora_sx1276 lora;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f867 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f7ff fc0b 	bl	8000458 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c42:	f000 f8c5 	bl	8000dd0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c46:	f000 f953 	bl	8000ef0 <MX_SPI1_Init>
//  lora.nss_port = GPIOA;
//  lora.nss_pin = GPIO_PIN_4;
//  lora.frequency = LORA_BASE_FREQUENCY_EU;

  // Initialize LoRa module
  uint8_t res = lora_init(&lora, &hspi1, GPIOA, GPIO_PIN_4, LORA_BASE_FREQUENCY_EU);
 8000c4a:	1d38      	adds	r0, r7, #4
 8000c4c:	a32d      	add	r3, pc, #180	; (adr r3, 8000d04 <main+0xd4>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	e9cd 2300 	strd	r2, r3, [sp]
 8000c56:	2310      	movs	r3, #16
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <main+0xb8>)
 8000c5a:	4924      	ldr	r1, [pc, #144]	; (8000cec <main+0xbc>)
 8000c5c:	f7ff ff87 	bl	8000b6e <lora_init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	77fb      	strb	r3, [r7, #31]
  if (res != LORA_OK) {
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <main+0x42>
	// Initialization failed
    test = 404;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <main+0xc0>)
 8000c6c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000c70:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Standby mode
	lora_mode_standby(&lora);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd89 	bl	800078c <lora_mode_standby>
	uint8_t packet_avail = lora_is_packet_available(&lora);
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff feac 	bl	80009da <lora_is_packet_available>
 8000c82:	4603      	mov	r3, r0
 8000c84:	77bb      	strb	r3, [r7, #30]
	if (packet_avail == 0)
 8000c86:	7fbb      	ldrb	r3, [r7, #30]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <main+0x66>
		sprintf(instruct, "No packet available");
 8000c8c:	4919      	ldr	r1, [pc, #100]	; (8000cf4 <main+0xc4>)
 8000c8e:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <main+0xc8>)
 8000c90:	f003 fa90 	bl	80041b4 <siprintf>
 8000c94:	e003      	b.n	8000c9e <main+0x6e>
	else
		sprintf(instruct, "Packet ready");
 8000c96:	4919      	ldr	r1, [pc, #100]	; (8000cfc <main+0xcc>)
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <main+0xc8>)
 8000c9a:	f003 fa8b 	bl	80041b4 <siprintf>

	//	// Send packets
//	uint8_t res = lora_receive_packet(&lora, rec_var, 4, uint8_t *error);
	test = 606;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <main+0xc0>)
 8000ca0:	f240 225e 	movw	r2, #606	; 0x25e
 8000ca4:	601a      	str	r2, [r3, #0]
//	// Send failed
//		test = 505;
//	}

	// Put LoRa modem into continuous receive mode
	lora_mode_receive_continuous(&lora);
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fd57 	bl	800075c <lora_mode_receive_continuous>
	// Wait for packet up to 10sec
	uint8_t res;
	uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8000cae:	1d38      	adds	r0, r7, #4
 8000cb0:	1cfb      	adds	r3, r7, #3
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cb8:	2220      	movs	r2, #32
 8000cba:	4911      	ldr	r1, [pc, #68]	; (8000d00 <main+0xd0>)
 8000cbc:	f7ff ff2f 	bl	8000b1e <lora_receive_packet_blocking>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	777b      	strb	r3, [r7, #29]
	if (res != LORA_OK) {
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <main+0xa2>
	  // Receive failed
		test = 505;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <main+0xc0>)
 8000ccc:	f240 12f9 	movw	r2, #505	; 0x1f9
 8000cd0:	601a      	str	r2, [r3, #0]
	}
	test = 707;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <main+0xc0>)
 8000cd4:	f240 22c3 	movw	r2, #707	; 0x2c3
 8000cd8:	601a      	str	r2, [r3, #0]
	buffer[len] = 0;  // null terminate string to print it
 8000cda:	7f7b      	ldrb	r3, [r7, #29]
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <main+0xd0>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	54d1      	strb	r1, [r2, r3]
  {
 8000ce2:	e7c6      	b.n	8000c72 <main+0x42>
 8000ce4:	f3af 8000 	nop.w
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	200000f8 	.word	0x200000f8
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	08004ad0 	.word	0x08004ad0
 8000cf8:	200000b0 	.word	0x200000b0
 8000cfc:	08004ae4 	.word	0x08004ae4
 8000d00:	20000090 	.word	0x20000090
 8000d04:	33bca100 	.word	0x33bca100
 8000d08:	00000000 	.word	0x00000000

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	2228      	movs	r2, #40	; 0x28
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fa42 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fdf4 	bl	8001954 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f827 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f861 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d9c:	f000 f812 	bl	8000dc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 f9d7 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000db8:	f000 f804 	bl	8000dc4 <Error_Handler>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3750      	adds	r7, #80	; 0x50
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2100      	movs	r1, #0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	460a      	mov	r2, r1
 8000de2:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000df2:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <MX_RTC_Init+0xc4>)
 8000df4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e04:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e06:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000e08:	f001 fb20 	bl	800244c <HAL_RTC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000e12:	f7ff ffd7 	bl	8000dc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2201      	movs	r2, #1
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000e2c:	f001 fba4 	bl	8002578 <HAL_RTC_SetTime>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000e36:	f7ff ffc5 	bl	8000dc4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4619      	mov	r1, r3
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000e54:	f001 fd00 	bl	8002858 <HAL_RTC_SetDate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000e5e:	f7ff ffb1 	bl	8000dc4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x23;
 8000e62:	2323      	movs	r3, #35	; 0x23
 8000e64:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x59;
 8000e66:	2359      	movs	r3, #89	; 0x59
 8000e68:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x59;
 8000e6a:	2359      	movs	r3, #89	; 0x59
 8000e6c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	2201      	movs	r2, #1
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_RTC_Init+0xc0>)
 8000e7a:	f001 fda3 	bl	80029c4 <HAL_RTC_SetAlarm_IT>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000e84:	f7ff ff9e 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000e4 	.word	0x200000e4
 8000e94:	40002800 	.word	0x40002800

08000e98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_RTC_MspInit+0x4c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d118      	bne.n	8000edc <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000eaa:	f000 fd47 	bl	800193c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_RTC_MspInit+0x50>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_RTC_MspInit+0x50>)
 8000eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_RTC_MspInit+0x50>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_RTC_MspInit+0x54>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2029      	movs	r0, #41	; 0x29
 8000ed2:	f000 fab2 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ed6:	2029      	movs	r0, #41	; 0x29
 8000ed8:	f000 facb 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40002800 	.word	0x40002800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	4242043c 	.word	0x4242043c

08000ef0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <MX_SPI1_Init+0x60>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f32:	220a      	movs	r2, #10
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_SPI1_Init+0x5c>)
 8000f38:	f002 f8d0 	bl	80030dc <HAL_SPI_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000f42:	f7ff ff3f 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f8 	.word	0x200000f8
 8000f50:	40013000 	.word	0x40013000

08000f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d12f      	bne.n	8000fd4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000fa4:	23b0      	movs	r3, #176	; 0xb0
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000fb8:	f000 fb02 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000fd0:	f000 faf6 	bl	80015c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40013000 	.word	0x40013000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_MspInit+0x5c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_MspInit+0x5c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x60>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_MspInit+0x60>)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f8bb 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}

0800109a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800109e:	2008      	movs	r0, #8
 80010a0:	f000 fc2a 	bl	80018f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <RTC_Alarm_IRQHandler+0x10>)
 80010ae:	f001 fd41 	bl	8002b34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000e4 	.word	0x200000e4

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f003 f830 	bl	8004150 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20005000 	.word	0x20005000
 800111c:	00000400 	.word	0x00000400
 8001120:	20000150 	.word	0x20000150
 8001124:	20000168 	.word	0x20000168

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115a:	f7ff ffe5 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f002 fffd 	bl	800415c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff fd65 	bl	8000c30 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001170:	08004b70 	.word	0x08004b70
  ldr r2, =_sbss
 8001174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001178:	20000168 	.word	0x20000168

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f947 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff ff24 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f95f 	bl	800148e <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f927 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000008 	.word	0x20000008
 800122c:	20000154 	.word	0x20000154

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000154 	.word	0x20000154

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4906      	ldr	r1, [pc, #24]	; (8001324 <__NVIC_EnableIRQ+0x34>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff90 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff2d 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff42 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff35 	bl	80012f0 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_DMA_Start_IT+0x20>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e04a      	b.n	800155c <HAL_DMA_Start_IT+0xb6>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d13a      	bne.n	800154e <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 f831 	bl	8001564 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 020e 	orr.w	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e00f      	b.n	800153c <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 020a 	orr.w	r2, r2, #10
 800153a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e005      	b.n	800155a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d108      	bne.n	80015a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015a2:	e007      	b.n	80015b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e169      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d4:	2201      	movs	r2, #1
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8158 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d05e      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 80015fc:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d875      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001602:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d058      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001608:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d86f      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800160e:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d052      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001614:	4a94      	ldr	r2, [pc, #592]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d869      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800161a:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04c      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001620:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_GPIO_Init+0x2ac>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d863      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001626:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d046      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 800162c:	4a90      	ldr	r2, [pc, #576]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d85d      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d82a      	bhi.n	800168c <HAL_GPIO_Init+0xcc>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d859      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_GPIO_Init+0x80>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	080016bb 	.word	0x080016bb
 8001644:	08001695 	.word	0x08001695
 8001648:	080016a7 	.word	0x080016a7
 800164c:	080016e9 	.word	0x080016e9
 8001650:	080016ef 	.word	0x080016ef
 8001654:	080016ef 	.word	0x080016ef
 8001658:	080016ef 	.word	0x080016ef
 800165c:	080016ef 	.word	0x080016ef
 8001660:	080016ef 	.word	0x080016ef
 8001664:	080016ef 	.word	0x080016ef
 8001668:	080016ef 	.word	0x080016ef
 800166c:	080016ef 	.word	0x080016ef
 8001670:	080016ef 	.word	0x080016ef
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016ef 	.word	0x080016ef
 800167c:	080016ef 	.word	0x080016ef
 8001680:	080016ef 	.word	0x080016ef
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016b1 	.word	0x080016b1
 800168c:	4a79      	ldr	r2, [pc, #484]	; (8001874 <HAL_GPIO_Init+0x2b4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001692:	e02c      	b.n	80016ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e029      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	3304      	adds	r3, #4
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e024      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	3308      	adds	r3, #8
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e01f      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	330c      	adds	r3, #12
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e01a      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c2:	2304      	movs	r3, #4
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e013      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
          break;
 80016da:	e009      	b.n	80016f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	615a      	str	r2, [r3, #20]
          break;
 80016e6:	e003      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          break;
 80016ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d801      	bhi.n	80016fa <HAL_GPIO_Init+0x13a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	e001      	b.n	80016fe <HAL_GPIO_Init+0x13e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d802      	bhi.n	800170c <HAL_GPIO_Init+0x14c>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x152>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3b08      	subs	r3, #8
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	210f      	movs	r1, #15
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80b1 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2bc>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1ec>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1e8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3e      	ldr	r2, [pc, #248]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1e4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1e0>
 800179c:	2303      	movs	r3, #3
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017ac:	2300      	movs	r3, #0
 80017ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017be:	492f      	ldr	r1, [pc, #188]	; (800187c <HAL_GPIO_Init+0x2bc>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	492c      	ldr	r1, [pc, #176]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4928      	ldr	r1, [pc, #160]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4918      	ldr	r1, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4914      	ldr	r1, [pc, #80]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x2e2>
 800185e:	bf00      	nop
 8001860:	10320000 	.word	0x10320000
 8001864:	10310000 	.word	0x10310000
 8001868:	10220000 	.word	0x10220000
 800186c:	10210000 	.word	0x10210000
 8001870:	10120000 	.word	0x10120000
 8001874:	10110000 	.word	0x10110000
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000
 8001880:	40010800 	.word	0x40010800
 8001884:	40010c00 	.word	0x40010c00
 8001888:	40011000 	.word	0x40011000
 800188c:	40011400 	.word	0x40011400
 8001890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	43db      	mvns	r3, r3
 800189c:	4909      	ldr	r1, [pc, #36]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800189e:	4013      	ands	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f ae8e 	bne.w	80015d4 <HAL_GPIO_Init+0x14>
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	372c      	adds	r7, #44	; 0x2c
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f806 	bl	8001928 <HAL_GPIO_EXTI_Callback>
  }
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	420e0020 	.word	0x420e0020

08001954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e272      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8087 	beq.w	8001a82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d00c      	beq.n	800199a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001980:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d112      	bne.n	80019b2 <HAL_RCC_OscConfig+0x5e>
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d10b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d06c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x12c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d168      	bne.n	8001a80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e24c      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x76>
 80019bc:	4b80      	ldr	r3, [pc, #512]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a7f      	ldr	r2, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e02e      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x98>
 80019d2:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7a      	ldr	r2, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a77      	ldr	r2, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0xbc>
 80019f6:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a71      	ldr	r2, [pc, #452]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xd4>
 8001a10:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a67      	ldr	r2, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fbfe 	bl	8001230 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fbfa 	bl	8001230 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e200      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xe4>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbea 	bl	8001230 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fbe6 	bl	8001230 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1ec      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x10c>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d063      	beq.n	8001b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x18c>
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x176>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1c0      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4939      	ldr	r1, [pc, #228]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb9f 	bl	8001230 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fb9b 	bl	8001230 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1a1      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb7e 	bl	8001230 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff fb7a 	bl	8001230 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e180      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03a      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7ff fb5e 	bl	8001230 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff fb5a 	bl	8001230 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e160      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 fac4 	bl	8002124 <RCC_Delay>
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fb44 	bl	8001230 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001baa:	e00f      	b.n	8001bcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb40 	bl	8001230 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d908      	bls.n	8001bcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e146      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	42420000 	.word	0x42420000
 8001bc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1e9      	bne.n	8001bac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a6 	beq.w	8001d32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b8b      	ldr	r3, [pc, #556]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10d      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a87      	ldr	r2, [pc, #540]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <HAL_RCC_OscConfig+0x4c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x4c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7e      	ldr	r2, [pc, #504]	; (8001e1c <HAL_RCC_OscConfig+0x4c8>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb01 	bl	8001230 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff fafd 	bl	8001230 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e103      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x4c8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x312>
 8001c58:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4a6e      	ldr	r2, [pc, #440]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	e02d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x334>
 8001c6e:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a69      	ldr	r2, [pc, #420]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a66      	ldr	r2, [pc, #408]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	e01c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_OscConfig+0x356>
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a60      	ldr	r2, [pc, #384]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e00b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x36e>
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a5a      	ldr	r2, [pc, #360]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d015      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fab1 	bl	8001230 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff faad 	bl	8001230 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0b1      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ee      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fa9b 	bl	8001230 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fa97 	bl	8001230 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e09b      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ee      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8087 	beq.w	8001e4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d061      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d146      	bne.n	8001dde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fa6b 	bl	8001230 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fa67 	bl	8001230 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e06d      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4921      	ldr	r1, [pc, #132]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a19      	ldr	r1, [r3, #32]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	430b      	orrs	r3, r1
 8001daa:	491b      	ldr	r1, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fa3b 	bl	8001230 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff fa37 	bl	8001230 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e03d      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x46a>
 8001ddc:	e035      	b.n	8001e4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x4cc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fa24 	bl	8001230 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa20 	bl	8001230 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e026      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x498>
 8001e0a:	e01e      	b.n	8001e4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e019      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x500>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d0      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d910      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	4965      	ldr	r1, [pc, #404]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d040      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07f      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e073      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06b      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4936      	ldr	r1, [pc, #216]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f972 	bl	8001230 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f96e 	bl	8001230 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e053      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d210      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4922      	ldr	r1, [pc, #136]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe6:	f000 f821 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1cc>)
 8002000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1d0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f8d0 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	08004b14 	.word	0x08004b14
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	b490      	push	{r4, r7}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002034:	1d3c      	adds	r4, r7, #4
 8002036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800203c:	f240 2301 	movw	r3, #513	; 0x201
 8002040:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x40>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x46>
 800206a:	e02b      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	e02b      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3328      	adds	r3, #40	; 0x28
 800207c:	443b      	add	r3, r7
 800207e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002082:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0c5b      	lsrs	r3, r3, #17
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	3328      	adds	r3, #40	; 0x28
 800209a:	443b      	add	r3, r7
 800209c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a6:	fb03 f202 	mul.w	r2, r3, r2
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e004      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	623b      	str	r3, [r7, #32]
      break;
 80020c2:	e002      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020c6:	623b      	str	r3, [r7, #32]
      break;
 80020c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc90      	pop	{r4, r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	08004af4 	.word	0x08004af4
 80020dc:	40021000 	.word	0x40021000
 80020e0:	007a1200 	.word	0x007a1200
 80020e4:	003d0900 	.word	0x003d0900

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff fff2 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08004b24 	.word	0x08004b24

08002124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <RCC_Delay+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <RCC_Delay+0x38>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a5b      	lsrs	r3, r3, #9
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002140:	bf00      	nop
  }
  while (Delay --);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	60fa      	str	r2, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <RCC_Delay+0x1c>
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000000 	.word	0x20000000
 800215c:	10624dd3 	.word	0x10624dd3

08002160 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d07d      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	61d3      	str	r3, [r2, #28]
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d118      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a42      	ldr	r2, [pc, #264]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c0:	f7ff f836 	bl	8001230 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	e008      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7ff f832 	bl	8001230 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e06d      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02e      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d027      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002204:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800221a:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff f801 	bl	8001230 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fffd 	bl	8001230 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e036      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ee      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4917      	ldr	r1, [pc, #92]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	4313      	orrs	r3, r2
 8002264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	490b      	ldr	r1, [pc, #44]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	4904      	ldr	r1, [pc, #16]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420440 	.word	0x42420440

080022cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b08d      	sub	sp, #52	; 0x34
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80022d6:	f107 040c 	add.w	r4, r7, #12
 80022da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e0:	f240 2301 	movw	r3, #513	; 0x201
 80022e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	2300      	movs	r3, #0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b10      	cmp	r3, #16
 8002304:	f200 808e 	bhi.w	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d049      	beq.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d079      	beq.n	8002408 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002314:	e086      	b.n	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d07f      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	3330      	adds	r3, #48	; 0x30
 8002332:	443b      	add	r3, r7
 8002334:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002338:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d017      	beq.n	8002374 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c5b      	lsrs	r3, r3, #17
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	3330      	adds	r3, #48	; 0x30
 8002350:	443b      	add	r3, r7
 8002352:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	fbb2 f2f3 	udiv	r2, r2, r3
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	e004      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d102      	bne.n	8002392 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002390:	e04a      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023a0:	e042      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b2:	d108      	bne.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80023be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c4:	e01f      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d109      	bne.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80023de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e4:	e00f      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f0:	d11c      	bne.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80023fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002404:	e012      	b.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002406:	e011      	b.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002408:	f7ff fe78 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0b9b      	lsrs	r3, r3, #14
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	3301      	adds	r3, #1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002422:	e004      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002424:	bf00      	nop
 8002426:	e002      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800242c:	bf00      	nop
    }
  }
  return (frequency);
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002430:	4618      	mov	r0, r3
 8002432:	3734      	adds	r7, #52	; 0x34
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	08004b04 	.word	0x08004b04
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	003d0900 	.word	0x003d0900
 8002448:	aaaaaaab 	.word	0xaaaaaaab

0800244c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e084      	b.n	800256c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7c5b      	ldrb	r3, [r3, #17]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fd10 	bl	8000e98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fb8b 	bl	8002b9a <HAL_RTC_WaitForSynchro>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2204      	movs	r2, #4
 800248e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e06b      	b.n	800256c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fc44 	bl	8002d22 <RTC_EnterInitMode>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2204      	movs	r2, #4
 80024a4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e060      	b.n	800256c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0207 	bic.w	r2, r2, #7
 80024b8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RTC_Init+0x128>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_RTC_Init+0x128>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RTC_Init+0x128>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4926      	ldr	r1, [pc, #152]	; (8002574 <HAL_RTC_Init+0x128>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d003      	beq.n	80024f2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e00e      	b.n	8002510 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff feea 	bl	80022cc <HAL_RCCEx_GetPeriphCLKFreq>
 80024f8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e030      	b.n	800256c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3b01      	subs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 010f 	bic.w	r1, r3, #15
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c1a      	lsrs	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	b291      	uxth	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fc18 	bl	8002d72 <RTC_ExitInitMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2204      	movs	r2, #4
 800254c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00c      	b.n	800256c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40006c00 	.word	0x40006c00

08002578 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RTC_SetTime+0x20>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e080      	b.n	800269e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	7c1b      	ldrb	r3, [r3, #16]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_RTC_SetTime+0x30>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e07a      	b.n	800269e <HAL_RTC_SetTime+0x126>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d113      	bne.n	80025e2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025c4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	4619      	mov	r1, r3
 80025ce:	460b      	mov	r3, r1
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a5b      	subs	r3, r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025d6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e01e      	b.n	8002620 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fc08 	bl	8002dfc <RTC_Bcd2ToByte>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025f4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fbfd 	bl	8002dfc <RTC_Bcd2ToByte>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800260e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	789b      	ldrb	r3, [r3, #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fbf1 	bl	8002dfc <RTC_Bcd2ToByte>
 800261a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800261c:	4423      	add	r3, r4
 800261e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002620:	6979      	ldr	r1, [r7, #20]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fb16 	bl	8002c54 <RTC_WriteTimeCounter>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2204      	movs	r2, #4
 8002632:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02f      	b.n	800269e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0205 	bic.w	r2, r2, #5
 800264c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb27 	bl	8002ca2 <RTC_ReadAlarmCounter>
 8002654:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d018      	beq.n	8002690 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d214      	bcs.n	8002690 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800266c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002670:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002672:	6939      	ldr	r1, [r7, #16]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb2d 	bl	8002cd4 <RTC_WriteAlarmCounter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e006      	b.n	800269e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
	...

080026a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_RTC_GetTime+0x28>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b5      	b.n	8002840 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0ac      	b.n	8002840 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa84 	bl	8002bf4 <RTC_ReadTimeCounter>
 80026ec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_RTC_GetTime+0x1a4>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2da      	uxtb	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_RTC_GetTime+0x1a0>)
 8002720:	fba2 1203 	umull	r1, r2, r2, r3
 8002724:	0ad2      	lsrs	r2, r2, #11
 8002726:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800272a:	fb01 f202 	mul.w	r2, r1, r2
 800272e:	1a9a      	subs	r2, r3, r2
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RTC_GetTime+0x1a4>)
 8002732:	fba3 1302 	umull	r1, r3, r3, r2
 8002736:	0959      	lsrs	r1, r3, #5
 8002738:	460b      	mov	r3, r1
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a5b      	subs	r3, r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	1ad1      	subs	r1, r2, r3
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b17      	cmp	r3, #23
 800274c:	d955      	bls.n	80027fa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RTC_GetTime+0x1a8>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800275a:	6939      	ldr	r1, [r7, #16]
 800275c:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RTC_GetTime+0x1a8>)
 800275e:	fba3 2301 	umull	r2, r3, r3, r1
 8002762:	091a      	lsrs	r2, r3, #4
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1aca      	subs	r2, r1, r3
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa94 	bl	8002ca2 <RTC_ReadAlarmCounter>
 800277a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d008      	beq.n	8002796 <HAL_RTC_GetTime+0xee>
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	429a      	cmp	r2, r3
 800278a:	d904      	bls.n	8002796 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e002      	b.n	800279c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <HAL_RTC_GetTime+0x1ac>)
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fa51 	bl	8002c54 <RTC_WriteTimeCounter>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e041      	b.n	8002840 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d00c      	beq.n	80027de <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027cc:	69f9      	ldr	r1, [r7, #28]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fa80 	bl	8002cd4 <RTC_WriteAlarmCounter>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e030      	b.n	8002840 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027de:	69f9      	ldr	r1, [r7, #28]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fa77 	bl	8002cd4 <RTC_WriteAlarmCounter>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e027      	b.n	8002840 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80027f0:	6979      	ldr	r1, [r7, #20]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb1f 	bl	8002e36 <RTC_DateUpdate>
 80027f8:	e003      	b.n	8002802 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01a      	beq.n	800283e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fad8 	bl	8002dc2 <RTC_ByteToBcd2>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 facf 	bl	8002dc2 <RTC_ByteToBcd2>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fac6 	bl	8002dc2 <RTC_ByteToBcd2>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	91a2b3c5 	.word	0x91a2b3c5
 800284c:	88888889 	.word	0x88888889
 8002850:	aaaaaaab 	.word	0xaaaaaaab
 8002854:	00015180 	.word	0x00015180

08002858 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RTC_SetDate+0x24>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e097      	b.n	80029b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	7c1b      	ldrb	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_RTC_SetDate+0x34>
 8002888:	2302      	movs	r3, #2
 800288a:	e091      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	78da      	ldrb	r2, [r3, #3]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785a      	ldrb	r2, [r3, #1]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	789a      	ldrb	r2, [r3, #2]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	739a      	strb	r2, [r3, #14]
 80028b6:	e01a      	b.n	80028ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa9d 	bl	8002dfc <RTC_Bcd2ToByte>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa94 	bl	8002dfc <RTC_Bcd2ToByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa8b 	bl	8002dfc <RTC_Bcd2ToByte>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	7bdb      	ldrb	r3, [r3, #15]
 80028f2:	4618      	mov	r0, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7b59      	ldrb	r1, [r3, #13]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	7b9b      	ldrb	r3, [r3, #14]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f000 fb75 	bl	8002fec <RTC_WeekDayNum>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	7b1a      	ldrb	r2, [r3, #12]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f96e 	bl	8002bf4 <RTC_ReadTimeCounter>
 8002918:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <HAL_RTC_SetDate+0x160>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b18      	cmp	r3, #24
 800292a:	d93a      	bls.n	80029a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <HAL_RTC_SetDate+0x164>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_RTC_SetDate+0x168>)
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002942:	69f9      	ldr	r1, [r7, #28]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f985 	bl	8002c54 <RTC_WriteTimeCounter>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2204      	movs	r2, #4
 8002954:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e027      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f99e 	bl	8002ca2 <RTC_ReadAlarmCounter>
 8002966:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d018      	beq.n	80029a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	d214      	bcs.n	80029a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800297e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002982:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f9a4 	bl	8002cd4 <RTC_WriteAlarmCounter>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2204      	movs	r2, #4
 8002996:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e006      	b.n	80029b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	91a2b3c5 	.word	0x91a2b3c5
 80029bc:	aaaaaaab 	.word	0xaaaaaaab
 80029c0:	00015180 	.word	0x00015180

080029c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2100      	movs	r1, #0
 80029da:	460a      	mov	r2, r1
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	460a      	mov	r2, r1
 80029e0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_RTC_SetAlarm_IT+0x2a>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e099      	b.n	8002b26 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_RTC_SetAlarm_IT+0x3a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e093      	b.n	8002b26 <HAL_RTC_SetAlarm_IT+0x162>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2202      	movs	r2, #2
 8002a08:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fe48 	bl	80026a8 <HAL_RTC_GetTime>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e081      	b.n	8002b26 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	4619      	mov	r1, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a3a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002a3c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002a3e:	4413      	add	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a52:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a5b      	subs	r3, r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a64:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002a6a:	4413      	add	r3, r2
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e01e      	b.n	8002aae <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f9c1 	bl	8002dfc <RTC_Bcd2ToByte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a82:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f9b6 	bl	8002dfc <RTC_Bcd2ToByte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a9c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f9aa 	bl	8002dfc <RTC_Bcd2ToByte>
 8002aa8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002aaa:	4423      	add	r3, r4
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d205      	bcs.n	8002ac2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ac0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ac2:	69f9      	ldr	r1, [r7, #28]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f905 	bl	8002cd4 <RTC_WriteAlarmCounter>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e022      	b.n	8002b26 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0202 	bic.w	r2, r2, #2
 8002aee:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0202 	orr.w	r2, r2, #2
 8002afe:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b16:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d011      	beq.n	8002b6e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f815 	bl	8002b88 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0202 	bic.w	r2, r2, #2
 8002b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b74:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	745a      	strb	r2, [r3, #17]
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e01d      	b.n	8002bec <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0208 	bic.w	r2, r2, #8
 8002bbe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002bc0:	f7fe fb36 	bl	8001230 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bc6:	e009      	b.n	8002bdc <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bc8:	f7fe fb32 	bl	8001230 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd6:	d901      	bls.n	8002bdc <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e007      	b.n	8002bec <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	827b      	strh	r3, [r7, #18]
 8002c00:	2300      	movs	r3, #0
 8002c02:	823b      	strh	r3, [r7, #16]
 8002c04:	2300      	movs	r3, #0
 8002c06:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002c24:	8a7a      	ldrh	r2, [r7, #18]
 8002c26:	8a3b      	ldrh	r3, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d008      	beq.n	8002c3e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002c2c:	8a3b      	ldrh	r3, [r7, #16]
 8002c2e:	041a      	lsls	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e004      	b.n	8002c48 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002c3e:	8a7b      	ldrh	r3, [r7, #18]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002c48:	697b      	ldr	r3, [r7, #20]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f85d 	bl	8002d22 <RTC_EnterInitMode>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e011      	b.n	8002c98 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	0c12      	lsrs	r2, r2, #16
 8002c7c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	b292      	uxth	r2, r2
 8002c86:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f872 	bl	8002d72 <RTC_ExitInitMode>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	81fb      	strh	r3, [r7, #14]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	89bb      	ldrh	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f81d 	bl	8002d22 <RTC_EnterInitMode>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	e011      	b.n	8002d18 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	0c12      	lsrs	r2, r2, #16
 8002cfc:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	b292      	uxth	r2, r2
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f832 	bl	8002d72 <RTC_ExitInitMode>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002d2e:	f7fe fa7f 	bl	8001230 <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d34:	e009      	b.n	8002d4a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d36:	f7fe fa7b 	bl	8001230 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d44:	d901      	bls.n	8002d4a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e00f      	b.n	8002d6a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ee      	beq.n	8002d36 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0210 	orr.w	r2, r2, #16
 8002d66:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0210 	bic.w	r2, r2, #16
 8002d8c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d8e:	f7fe fa4f 	bl	8001230 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d94:	e009      	b.n	8002daa <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d96:	f7fe fa4b 	bl	8001230 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da4:	d901      	bls.n	8002daa <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e007      	b.n	8002dba <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ee      	beq.n	8002d96 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002dd0:	e005      	b.n	8002dde <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	3b0a      	subs	r3, #10
 8002ddc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b09      	cmp	r3, #9
 8002de2:	d8f6      	bhi.n	8002dd2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	b2db      	uxtb	r3, r3
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b2db      	uxtb	r3, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7bdb      	ldrb	r3, [r3, #15]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7b5b      	ldrb	r3, [r3, #13]
 8002e5a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7b9b      	ldrb	r3, [r3, #14]
 8002e60:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	e06f      	b.n	8002f48 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d011      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d00e      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d00b      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	d008      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d005      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b0a      	cmp	r3, #10
 8002e8a:	d002      	beq.n	8002e92 <RTC_DateUpdate+0x5c>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d117      	bne.n	8002ec2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b1e      	cmp	r3, #30
 8002e96:	d803      	bhi.n	8002ea0 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e9e:	e050      	b.n	8002f42 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d005      	beq.n	8002eb2 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002eb0:	e047      	b.n	8002f42 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
          year++;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002ec0:	e03f      	b.n	8002f42 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d008      	beq.n	8002eda <RTC_DateUpdate+0xa4>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d005      	beq.n	8002eda <RTC_DateUpdate+0xa4>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d002      	beq.n	8002eda <RTC_DateUpdate+0xa4>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0b      	cmp	r3, #11
 8002ed8:	d10c      	bne.n	8002ef4 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b1d      	cmp	r3, #29
 8002ede:	d803      	bhi.n	8002ee8 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ee6:	e02c      	b.n	8002f42 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ef2:	e026      	b.n	8002f42 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d123      	bne.n	8002f42 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b1b      	cmp	r3, #27
 8002efe:	d803      	bhi.n	8002f08 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e01c      	b.n	8002f42 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b1c      	cmp	r3, #28
 8002f0c:	d111      	bne.n	8002f32 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f838 	bl	8002f88 <RTC_IsLeapYear>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e00d      	b.n	8002f42 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e007      	b.n	8002f42 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b1d      	cmp	r3, #29
 8002f36:	d104      	bne.n	8002f42 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d38b      	bcc.n	8002e68 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f000 f83a 	bl	8002fec <RTC_WeekDayNum>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	731a      	strb	r2, [r3, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e01d      	b.n	8002fde <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <RTC_IsLeapYear+0x60>)
 8002fa6:	fba2 1203 	umull	r1, r2, r2, r3
 8002faa:	0952      	lsrs	r2, r2, #5
 8002fac:	2164      	movs	r1, #100	; 0x64
 8002fae:	fb01 f202 	mul.w	r2, r1, r2
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <RTC_IsLeapYear+0x60>)
 8002fc2:	fba2 1203 	umull	r1, r2, r2, r3
 8002fc6:	09d2      	lsrs	r2, r2, #7
 8002fc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002fcc:	fb01 f202 	mul.w	r2, r1, r2
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002fdc:	2300      	movs	r3, #0
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	51eb851f 	.word	0x51eb851f

08002fec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800300a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d82d      	bhi.n	800306e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <RTC_WeekDayNum+0xe4>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	085a      	lsrs	r2, r3, #1
 8003026:	78bb      	ldrb	r3, [r7, #2]
 8003028:	441a      	add	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	441a      	add	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	4926      	ldr	r1, [pc, #152]	; (80030d4 <RTC_WeekDayNum+0xe8>)
 800303c:	fba1 1303 	umull	r1, r3, r1, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3b01      	subs	r3, #1
 8003048:	4922      	ldr	r1, [pc, #136]	; (80030d4 <RTC_WeekDayNum+0xe8>)
 800304a:	fba1 1303 	umull	r1, r3, r1, r3
 800304e:	09db      	lsrs	r3, r3, #7
 8003050:	4413      	add	r3, r2
 8003052:	1d1a      	adds	r2, r3, #4
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <RTC_WeekDayNum+0xec>)
 8003056:	fba3 1302 	umull	r1, r3, r3, r2
 800305a:	1ad1      	subs	r1, r2, r3
 800305c:	0849      	lsrs	r1, r1, #1
 800305e:	440b      	add	r3, r1
 8003060:	0899      	lsrs	r1, r3, #2
 8003062:	460b      	mov	r3, r1
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a5b      	subs	r3, r3, r1
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e029      	b.n	80030c2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <RTC_WeekDayNum+0xe4>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	085a      	lsrs	r2, r3, #1
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	441a      	add	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	441a      	add	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4910      	ldr	r1, [pc, #64]	; (80030d4 <RTC_WeekDayNum+0xe8>)
 8003094:	fba1 1303 	umull	r1, r3, r1, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	490d      	ldr	r1, [pc, #52]	; (80030d4 <RTC_WeekDayNum+0xe8>)
 80030a0:	fba1 1303 	umull	r1, r3, r1, r3
 80030a4:	09db      	lsrs	r3, r3, #7
 80030a6:	4413      	add	r3, r2
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <RTC_WeekDayNum+0xec>)
 80030ac:	fba3 1302 	umull	r1, r3, r3, r2
 80030b0:	1ad1      	subs	r1, r2, r3
 80030b2:	0849      	lsrs	r1, r1, #1
 80030b4:	440b      	add	r3, r1
 80030b6:	0899      	lsrs	r1, r3, #2
 80030b8:	460b      	mov	r3, r1
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	b2db      	uxtb	r3, r3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	38e38e39 	.word	0x38e38e39
 80030d4:	51eb851f 	.word	0x51eb851f
 80030d8:	24924925 	.word	0x24924925

080030dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e076      	b.n	80031dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d108      	bne.n	8003108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fe:	d009      	beq.n	8003114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	e005      	b.n	8003114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd ff10 	bl	8000f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	0c1a      	lsrs	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f002 0204 	and.w	r2, r2, #4
 80031ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_SPI_Transmit+0x22>
 8003202:	2302      	movs	r3, #2
 8003204:	e126      	b.n	8003454 <HAL_SPI_Transmit+0x270>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800320e:	f7fe f80f 	bl	8001230 <HAL_GetTick>
 8003212:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d002      	beq.n	800322a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003228:	e10b      	b.n	8003442 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_SPI_Transmit+0x52>
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800323a:	e102      	b.n	8003442 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003282:	d10f      	bne.n	80032a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d007      	beq.n	80032c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d14b      	bne.n	8003364 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_SPI_Transmit+0xf6>
 80032d4:	8afb      	ldrh	r3, [r7, #22]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d13e      	bne.n	8003358 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	1c9a      	adds	r2, r3, #2
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032fe:	e02b      	b.n	8003358 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d112      	bne.n	8003334 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	1c9a      	adds	r2, r3, #2
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	86da      	strh	r2, [r3, #54]	; 0x36
 8003332:	e011      	b.n	8003358 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003334:	f7fd ff7c 	bl	8001230 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d803      	bhi.n	800334c <HAL_SPI_Transmit+0x168>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d102      	bne.n	8003352 <HAL_SPI_Transmit+0x16e>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003356:	e074      	b.n	8003442 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ce      	bne.n	8003300 <HAL_SPI_Transmit+0x11c>
 8003362:	e04c      	b.n	80033fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_SPI_Transmit+0x18e>
 800336c:	8afb      	ldrh	r3, [r7, #22]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d140      	bne.n	80033f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003398:	e02c      	b.n	80033f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d113      	bne.n	80033d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80033ce:	e011      	b.n	80033f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d0:	f7fd ff2e 	bl	8001230 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d803      	bhi.n	80033e8 <HAL_SPI_Transmit+0x204>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Transmit+0x20a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033f2:	e026      	b.n	8003442 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1cd      	bne.n	800339a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fe86 	bl	8004114 <SPI_EndRxTxTransaction>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e000      	b.n	8003442 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003440:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003452:	7ffb      	ldrb	r3, [r7, #31]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003478:	d112      	bne.n	80034a0 <HAL_SPI_Receive+0x44>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10e      	bne.n	80034a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2204      	movs	r2, #4
 8003486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8f1 	bl	800367e <HAL_SPI_TransmitReceive>
 800349c:	4603      	mov	r3, r0
 800349e:	e0ea      	b.n	8003676 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_SPI_Receive+0x52>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0e3      	b.n	8003676 <HAL_SPI_Receive+0x21a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b6:	f7fd febb 	bl	8001230 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034cc:	e0ca      	b.n	8003664 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_SPI_Receive+0x7e>
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034de:	e0c1      	b.n	8003664 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003526:	d10f      	bne.n	8003548 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d007      	beq.n	8003566 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d162      	bne.n	8003634 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800356e:	e02e      	b.n	80035ce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d115      	bne.n	80035aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f103 020c 	add.w	r2, r3, #12
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a8:	e011      	b.n	80035ce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035aa:	f7fd fe41 	bl	8001230 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d803      	bhi.n	80035c2 <HAL_SPI_Receive+0x166>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Receive+0x16c>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035cc:	e04a      	b.n	8003664 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1cb      	bne.n	8003570 <HAL_SPI_Receive+0x114>
 80035d8:	e031      	b.n	800363e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d113      	bne.n	8003610 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	b292      	uxth	r2, r2
 80035f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360e:	e011      	b.n	8003634 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003610:	f7fd fe0e 	bl	8001230 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d803      	bhi.n	8003628 <HAL_SPI_Receive+0x1cc>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d102      	bne.n	800362e <HAL_SPI_Receive+0x1d2>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003632:	e017      	b.n	8003664 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cd      	bne.n	80035da <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fd14 	bl	8004070 <SPI_EndRxTransaction>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
 8003660:	e000      	b.n	8003664 <HAL_SPI_Receive+0x208>
  }

error :
 8003662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b08c      	sub	sp, #48	; 0x30
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800368c:	2301      	movs	r3, #1
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x26>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e18a      	b.n	80039ba <HAL_SPI_TransmitReceive+0x33c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ac:	f7fd fdc0 	bl	8001230 <HAL_GetTick>
 80036b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d00f      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x70>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d4:	d107      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x68>
 80036de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d003      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
 80036e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036ec:	e15b      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x82>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x82>
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003706:	e14e      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b04      	cmp	r3, #4
 8003712:	d003      	beq.n	800371c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2205      	movs	r2, #5
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	887a      	ldrh	r2, [r7, #2]
 8003732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d007      	beq.n	8003770 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d178      	bne.n	800386c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x10a>
 8003782:	8b7b      	ldrh	r3, [r7, #26]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d166      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ac:	e053      	b.n	8003856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11b      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x176>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x176>
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d113      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d119      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x1b8>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d014      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	b292      	uxth	r2, r2
 8003818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003832:	2301      	movs	r3, #1
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003836:	f7fd fcfb 	bl	8001230 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003842:	429a      	cmp	r2, r3
 8003844:	d807      	bhi.n	8003856 <HAL_SPI_TransmitReceive+0x1d8>
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d003      	beq.n	8003856 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003854:	e0a7      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1a6      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x130>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a1      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x130>
 800386a:	e07c      	b.n	8003966 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_SPI_TransmitReceive+0x1fc>
 8003874:	8b7b      	ldrh	r3, [r7, #26]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d16b      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a0:	e057      	b.n	8003952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d11c      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x26c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d017      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x26c>
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d114      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d119      	bne.n	800392c <HAL_SPI_TransmitReceive+0x2ae>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d014      	beq.n	800392c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800392c:	f7fd fc80 	bl	8001230 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_TransmitReceive+0x2c6>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d102      	bne.n	800394a <HAL_SPI_TransmitReceive+0x2cc>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003950:	e029      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1a2      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x224>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d19d      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fbd2 	bl	8004114 <SPI_EndRxTxTransaction>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003982:	e010      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	e000      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d110      	bne.n	8003a00 <HAL_SPI_Receive_DMA+0x3c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e6:	d10b      	bne.n	8003a00 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2204      	movs	r2, #4
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f8ac 	bl	8003b54 <HAL_SPI_TransmitReceive_DMA>
 80039fc:	4603      	mov	r3, r0
 80039fe:	e09f      	b.n	8003b40 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_SPI_Receive_DMA+0x4a>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e098      	b.n	8003b40 <HAL_SPI_Receive_DMA+0x17c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a26:	e086      	b.n	8003b36 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_Receive_DMA+0x70>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a38:	e07d      	b.n	8003b36 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7a:	d10f      	bne.n	8003a9c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_SPI_Receive_DMA+0x184>)
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_SPI_Receive_DMA+0x188>)
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <HAL_SPI_Receive_DMA+0x18c>)
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	2200      	movs	r2, #0
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ad4:	f7fd fce7 	bl	80014a6 <HAL_DMA_Start_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003af6:	e01e      	b.n	8003b36 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d007      	beq.n	8003b16 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0220 	orr.w	r2, r2, #32
 8003b24:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08003ee7 	.word	0x08003ee7
 8003b4c:	08003db3 	.word	0x08003db3
 8003b50:	08003f1f 	.word	0x08003f1f

08003b54 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e0e3      	b.n	8003d3c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b8a:	7dbb      	ldrb	r3, [r7, #22]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d00d      	beq.n	8003bac <HAL_SPI_TransmitReceive_DMA+0x58>
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b96:	d106      	bne.n	8003ba6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003ba0:	7dbb      	ldrb	r3, [r7, #22]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d002      	beq.n	8003bac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003baa:	e0c2      	b.n	8003d32 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bc2:	e0b6      	b.n	8003d32 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d003      	beq.n	8003bd8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	887a      	ldrh	r2, [r7, #2]
 8003bee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	887a      	ldrh	r2, [r7, #2]
 8003bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d108      	bne.n	8003c2c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	4a49      	ldr	r2, [pc, #292]	; (8003d44 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2a:	e007      	b.n	8003c3c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	4a46      	ldr	r2, [pc, #280]	; (8003d4c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	4a45      	ldr	r2, [pc, #276]	; (8003d50 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	4a44      	ldr	r2, [pc, #272]	; (8003d54 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	2200      	movs	r2, #0
 8003c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	4619      	mov	r1, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c64:	f7fd fc1f 	bl	80014a6 <HAL_DMA_Start_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c86:	e054      	b.n	8003d32 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cd0:	f7fd fbe9 	bl	80014a6 <HAL_DMA_Start_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003cf2:	e01e      	b.n	8003d32 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d007      	beq.n	8003d12 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0202 	orr.w	r2, r2, #2
 8003d30:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	08003ee7 	.word	0x08003ee7
 8003d48:	08003db3 	.word	0x08003db3
 8003d4c:	08003f03 	.word	0x08003f03
 8003d50:	08003e59 	.word	0x08003e59
 8003d54:	08003f1f 	.word	0x08003f1f

08003d58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc0:	f7fd fa36 	bl	8001230 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d03b      	beq.n	8003e4c <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0220 	bic.w	r2, r2, #32
 8003de2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10d      	bne.n	8003e08 <SPI_DMAReceiveCplt+0x56>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df4:	d108      	bne.n	8003e08 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0203 	bic.w	r2, r2, #3
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	e007      	b.n	8003e18 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f927 	bl	8004070 <SPI_EndRxTransaction>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ffab 	bl	8003da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e4a:	e002      	b.n	8003e52 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ff83 	bl	8003d58 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e66:	f7fd f9e3 	bl	8001230 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d02f      	beq.n	8003eda <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	2164      	movs	r1, #100	; 0x64
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f940 	bl	8004114 <SPI_EndRxTxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0203 	bic.w	r2, r2, #3
 8003eb4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff64 	bl	8003da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ed8:	e002      	b.n	8003ee0 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ff45 	bl	8003d6a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff ff41 	bl	8003d7c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff3c 	bl	8003d8e <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0203 	bic.w	r2, r2, #3
 8003f3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f043 0210 	orr.w	r2, r3, #16
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff ff25 	bl	8003da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f70:	f7fd f95e 	bl	8001230 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f80:	f7fd f956 	bl	8001230 <HAL_GetTick>
 8003f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	015b      	lsls	r3, r3, #5
 8003f8c:	0d1b      	lsrs	r3, r3, #20
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f96:	e054      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d050      	beq.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fa0:	f7fd f946 	bl	8001230 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d902      	bls.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d13d      	bne.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fce:	d111      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d004      	beq.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d107      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d10f      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800401c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e017      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d19b      	bne.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000

08004070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004084:	d111      	bne.n	80040aa <SPI_EndRxTransaction+0x3a>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408e:	d004      	beq.n	800409a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d107      	bne.n	80040aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d117      	bne.n	80040e4 <SPI_EndRxTransaction+0x74>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d112      	bne.n	80040e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2101      	movs	r1, #1
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ff49 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01a      	beq.n	800410a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e013      	b.n	800410c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff ff36 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e000      	b.n	800410c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff18 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e000      	b.n	8004148 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <__errno>:
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <__errno+0x8>)
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2000000c 	.word	0x2000000c

0800415c <__libc_init_array>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	2600      	movs	r6, #0
 8004160:	4d0c      	ldr	r5, [pc, #48]	; (8004194 <__libc_init_array+0x38>)
 8004162:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <__libc_init_array+0x3c>)
 8004164:	1b64      	subs	r4, r4, r5
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	42a6      	cmp	r6, r4
 800416a:	d109      	bne.n	8004180 <__libc_init_array+0x24>
 800416c:	f000 fc9c 	bl	8004aa8 <_init>
 8004170:	2600      	movs	r6, #0
 8004172:	4d0a      	ldr	r5, [pc, #40]	; (800419c <__libc_init_array+0x40>)
 8004174:	4c0a      	ldr	r4, [pc, #40]	; (80041a0 <__libc_init_array+0x44>)
 8004176:	1b64      	subs	r4, r4, r5
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	42a6      	cmp	r6, r4
 800417c:	d105      	bne.n	800418a <__libc_init_array+0x2e>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f855 3b04 	ldr.w	r3, [r5], #4
 8004184:	4798      	blx	r3
 8004186:	3601      	adds	r6, #1
 8004188:	e7ee      	b.n	8004168 <__libc_init_array+0xc>
 800418a:	f855 3b04 	ldr.w	r3, [r5], #4
 800418e:	4798      	blx	r3
 8004190:	3601      	adds	r6, #1
 8004192:	e7f2      	b.n	800417a <__libc_init_array+0x1e>
 8004194:	08004b68 	.word	0x08004b68
 8004198:	08004b68 	.word	0x08004b68
 800419c:	08004b68 	.word	0x08004b68
 80041a0:	08004b6c 	.word	0x08004b6c

080041a4 <memset>:
 80041a4:	4603      	mov	r3, r0
 80041a6:	4402      	add	r2, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <siprintf>:
 80041b4:	b40e      	push	{r1, r2, r3}
 80041b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041ba:	b500      	push	{lr}
 80041bc:	b09c      	sub	sp, #112	; 0x70
 80041be:	ab1d      	add	r3, sp, #116	; 0x74
 80041c0:	9002      	str	r0, [sp, #8]
 80041c2:	9006      	str	r0, [sp, #24]
 80041c4:	9107      	str	r1, [sp, #28]
 80041c6:	9104      	str	r1, [sp, #16]
 80041c8:	4808      	ldr	r0, [pc, #32]	; (80041ec <siprintf+0x38>)
 80041ca:	4909      	ldr	r1, [pc, #36]	; (80041f0 <siprintf+0x3c>)
 80041cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80041d0:	9105      	str	r1, [sp, #20]
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	a902      	add	r1, sp, #8
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	f000 f868 	bl	80042ac <_svfiprintf_r>
 80041dc:	2200      	movs	r2, #0
 80041de:	9b02      	ldr	r3, [sp, #8]
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	b01c      	add	sp, #112	; 0x70
 80041e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e8:	b003      	add	sp, #12
 80041ea:	4770      	bx	lr
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	ffff0208 	.word	0xffff0208

080041f4 <__ssputs_r>:
 80041f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	688e      	ldr	r6, [r1, #8]
 80041fa:	4682      	mov	sl, r0
 80041fc:	429e      	cmp	r6, r3
 80041fe:	460c      	mov	r4, r1
 8004200:	4690      	mov	r8, r2
 8004202:	461f      	mov	r7, r3
 8004204:	d838      	bhi.n	8004278 <__ssputs_r+0x84>
 8004206:	898a      	ldrh	r2, [r1, #12]
 8004208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800420c:	d032      	beq.n	8004274 <__ssputs_r+0x80>
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	6909      	ldr	r1, [r1, #16]
 8004212:	3301      	adds	r3, #1
 8004214:	eba5 0901 	sub.w	r9, r5, r1
 8004218:	6965      	ldr	r5, [r4, #20]
 800421a:	444b      	add	r3, r9
 800421c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004224:	106d      	asrs	r5, r5, #1
 8004226:	429d      	cmp	r5, r3
 8004228:	bf38      	it	cc
 800422a:	461d      	movcc	r5, r3
 800422c:	0553      	lsls	r3, r2, #21
 800422e:	d531      	bpl.n	8004294 <__ssputs_r+0xa0>
 8004230:	4629      	mov	r1, r5
 8004232:	f000 fb6f 	bl	8004914 <_malloc_r>
 8004236:	4606      	mov	r6, r0
 8004238:	b950      	cbnz	r0, 8004250 <__ssputs_r+0x5c>
 800423a:	230c      	movs	r3, #12
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	f8ca 3000 	str.w	r3, [sl]
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	464a      	mov	r2, r9
 8004252:	6921      	ldr	r1, [r4, #16]
 8004254:	f000 face 	bl	80047f4 <memcpy>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	6126      	str	r6, [r4, #16]
 8004266:	444e      	add	r6, r9
 8004268:	6026      	str	r6, [r4, #0]
 800426a:	463e      	mov	r6, r7
 800426c:	6165      	str	r5, [r4, #20]
 800426e:	eba5 0509 	sub.w	r5, r5, r9
 8004272:	60a5      	str	r5, [r4, #8]
 8004274:	42be      	cmp	r6, r7
 8004276:	d900      	bls.n	800427a <__ssputs_r+0x86>
 8004278:	463e      	mov	r6, r7
 800427a:	4632      	mov	r2, r6
 800427c:	4641      	mov	r1, r8
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	f000 fac6 	bl	8004810 <memmove>
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	2000      	movs	r0, #0
 8004288:	1b9b      	subs	r3, r3, r6
 800428a:	60a3      	str	r3, [r4, #8]
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	4433      	add	r3, r6
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	e7db      	b.n	800424c <__ssputs_r+0x58>
 8004294:	462a      	mov	r2, r5
 8004296:	f000 fbb1 	bl	80049fc <_realloc_r>
 800429a:	4606      	mov	r6, r0
 800429c:	2800      	cmp	r0, #0
 800429e:	d1e1      	bne.n	8004264 <__ssputs_r+0x70>
 80042a0:	4650      	mov	r0, sl
 80042a2:	6921      	ldr	r1, [r4, #16]
 80042a4:	f000 face 	bl	8004844 <_free_r>
 80042a8:	e7c7      	b.n	800423a <__ssputs_r+0x46>
	...

080042ac <_svfiprintf_r>:
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	4698      	mov	r8, r3
 80042b2:	898b      	ldrh	r3, [r1, #12]
 80042b4:	4607      	mov	r7, r0
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	460d      	mov	r5, r1
 80042ba:	4614      	mov	r4, r2
 80042bc:	b09d      	sub	sp, #116	; 0x74
 80042be:	d50e      	bpl.n	80042de <_svfiprintf_r+0x32>
 80042c0:	690b      	ldr	r3, [r1, #16]
 80042c2:	b963      	cbnz	r3, 80042de <_svfiprintf_r+0x32>
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	f000 fb25 	bl	8004914 <_malloc_r>
 80042ca:	6028      	str	r0, [r5, #0]
 80042cc:	6128      	str	r0, [r5, #16]
 80042ce:	b920      	cbnz	r0, 80042da <_svfiprintf_r+0x2e>
 80042d0:	230c      	movs	r3, #12
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	e0d1      	b.n	800447e <_svfiprintf_r+0x1d2>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	616b      	str	r3, [r5, #20]
 80042de:	2300      	movs	r3, #0
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
 80042e2:	2320      	movs	r3, #32
 80042e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e8:	2330      	movs	r3, #48	; 0x30
 80042ea:	f04f 0901 	mov.w	r9, #1
 80042ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004498 <_svfiprintf_r+0x1ec>
 80042f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042fa:	4623      	mov	r3, r4
 80042fc:	469a      	mov	sl, r3
 80042fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004302:	b10a      	cbz	r2, 8004308 <_svfiprintf_r+0x5c>
 8004304:	2a25      	cmp	r2, #37	; 0x25
 8004306:	d1f9      	bne.n	80042fc <_svfiprintf_r+0x50>
 8004308:	ebba 0b04 	subs.w	fp, sl, r4
 800430c:	d00b      	beq.n	8004326 <_svfiprintf_r+0x7a>
 800430e:	465b      	mov	r3, fp
 8004310:	4622      	mov	r2, r4
 8004312:	4629      	mov	r1, r5
 8004314:	4638      	mov	r0, r7
 8004316:	f7ff ff6d 	bl	80041f4 <__ssputs_r>
 800431a:	3001      	adds	r0, #1
 800431c:	f000 80aa 	beq.w	8004474 <_svfiprintf_r+0x1c8>
 8004320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004322:	445a      	add	r2, fp
 8004324:	9209      	str	r2, [sp, #36]	; 0x24
 8004326:	f89a 3000 	ldrb.w	r3, [sl]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80a2 	beq.w	8004474 <_svfiprintf_r+0x1c8>
 8004330:	2300      	movs	r3, #0
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800433a:	f10a 0a01 	add.w	sl, sl, #1
 800433e:	9304      	str	r3, [sp, #16]
 8004340:	9307      	str	r3, [sp, #28]
 8004342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004346:	931a      	str	r3, [sp, #104]	; 0x68
 8004348:	4654      	mov	r4, sl
 800434a:	2205      	movs	r2, #5
 800434c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004350:	4851      	ldr	r0, [pc, #324]	; (8004498 <_svfiprintf_r+0x1ec>)
 8004352:	f000 fa41 	bl	80047d8 <memchr>
 8004356:	9a04      	ldr	r2, [sp, #16]
 8004358:	b9d8      	cbnz	r0, 8004392 <_svfiprintf_r+0xe6>
 800435a:	06d0      	lsls	r0, r2, #27
 800435c:	bf44      	itt	mi
 800435e:	2320      	movmi	r3, #32
 8004360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004364:	0711      	lsls	r1, r2, #28
 8004366:	bf44      	itt	mi
 8004368:	232b      	movmi	r3, #43	; 0x2b
 800436a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436e:	f89a 3000 	ldrb.w	r3, [sl]
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d015      	beq.n	80043a2 <_svfiprintf_r+0xf6>
 8004376:	4654      	mov	r4, sl
 8004378:	2000      	movs	r0, #0
 800437a:	f04f 0c0a 	mov.w	ip, #10
 800437e:	9a07      	ldr	r2, [sp, #28]
 8004380:	4621      	mov	r1, r4
 8004382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004386:	3b30      	subs	r3, #48	; 0x30
 8004388:	2b09      	cmp	r3, #9
 800438a:	d94e      	bls.n	800442a <_svfiprintf_r+0x17e>
 800438c:	b1b0      	cbz	r0, 80043bc <_svfiprintf_r+0x110>
 800438e:	9207      	str	r2, [sp, #28]
 8004390:	e014      	b.n	80043bc <_svfiprintf_r+0x110>
 8004392:	eba0 0308 	sub.w	r3, r0, r8
 8004396:	fa09 f303 	lsl.w	r3, r9, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	46a2      	mov	sl, r4
 800439e:	9304      	str	r3, [sp, #16]
 80043a0:	e7d2      	b.n	8004348 <_svfiprintf_r+0x9c>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	1d19      	adds	r1, r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	9103      	str	r1, [sp, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfbb      	ittet	lt
 80043ae:	425b      	neglt	r3, r3
 80043b0:	f042 0202 	orrlt.w	r2, r2, #2
 80043b4:	9307      	strge	r3, [sp, #28]
 80043b6:	9307      	strlt	r3, [sp, #28]
 80043b8:	bfb8      	it	lt
 80043ba:	9204      	strlt	r2, [sp, #16]
 80043bc:	7823      	ldrb	r3, [r4, #0]
 80043be:	2b2e      	cmp	r3, #46	; 0x2e
 80043c0:	d10c      	bne.n	80043dc <_svfiprintf_r+0x130>
 80043c2:	7863      	ldrb	r3, [r4, #1]
 80043c4:	2b2a      	cmp	r3, #42	; 0x2a
 80043c6:	d135      	bne.n	8004434 <_svfiprintf_r+0x188>
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	3402      	adds	r4, #2
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	9203      	str	r2, [sp, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfb8      	it	lt
 80043d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800449c <_svfiprintf_r+0x1f0>
 80043e0:	2203      	movs	r2, #3
 80043e2:	4650      	mov	r0, sl
 80043e4:	7821      	ldrb	r1, [r4, #0]
 80043e6:	f000 f9f7 	bl	80047d8 <memchr>
 80043ea:	b140      	cbz	r0, 80043fe <_svfiprintf_r+0x152>
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	eba0 000a 	sub.w	r0, r0, sl
 80043f2:	fa03 f000 	lsl.w	r0, r3, r0
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	3401      	adds	r4, #1
 80043fa:	4303      	orrs	r3, r0
 80043fc:	9304      	str	r3, [sp, #16]
 80043fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004402:	2206      	movs	r2, #6
 8004404:	4826      	ldr	r0, [pc, #152]	; (80044a0 <_svfiprintf_r+0x1f4>)
 8004406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800440a:	f000 f9e5 	bl	80047d8 <memchr>
 800440e:	2800      	cmp	r0, #0
 8004410:	d038      	beq.n	8004484 <_svfiprintf_r+0x1d8>
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <_svfiprintf_r+0x1f8>)
 8004414:	bb1b      	cbnz	r3, 800445e <_svfiprintf_r+0x1b2>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	3307      	adds	r3, #7
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	3308      	adds	r3, #8
 8004420:	9303      	str	r3, [sp, #12]
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	4433      	add	r3, r6
 8004426:	9309      	str	r3, [sp, #36]	; 0x24
 8004428:	e767      	b.n	80042fa <_svfiprintf_r+0x4e>
 800442a:	460c      	mov	r4, r1
 800442c:	2001      	movs	r0, #1
 800442e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004432:	e7a5      	b.n	8004380 <_svfiprintf_r+0xd4>
 8004434:	2300      	movs	r3, #0
 8004436:	f04f 0c0a 	mov.w	ip, #10
 800443a:	4619      	mov	r1, r3
 800443c:	3401      	adds	r4, #1
 800443e:	9305      	str	r3, [sp, #20]
 8004440:	4620      	mov	r0, r4
 8004442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004446:	3a30      	subs	r2, #48	; 0x30
 8004448:	2a09      	cmp	r2, #9
 800444a:	d903      	bls.n	8004454 <_svfiprintf_r+0x1a8>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0c5      	beq.n	80043dc <_svfiprintf_r+0x130>
 8004450:	9105      	str	r1, [sp, #20]
 8004452:	e7c3      	b.n	80043dc <_svfiprintf_r+0x130>
 8004454:	4604      	mov	r4, r0
 8004456:	2301      	movs	r3, #1
 8004458:	fb0c 2101 	mla	r1, ip, r1, r2
 800445c:	e7f0      	b.n	8004440 <_svfiprintf_r+0x194>
 800445e:	ab03      	add	r3, sp, #12
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	462a      	mov	r2, r5
 8004464:	4638      	mov	r0, r7
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <_svfiprintf_r+0x1fc>)
 8004468:	a904      	add	r1, sp, #16
 800446a:	f3af 8000 	nop.w
 800446e:	1c42      	adds	r2, r0, #1
 8004470:	4606      	mov	r6, r0
 8004472:	d1d6      	bne.n	8004422 <_svfiprintf_r+0x176>
 8004474:	89ab      	ldrh	r3, [r5, #12]
 8004476:	065b      	lsls	r3, r3, #25
 8004478:	f53f af2c 	bmi.w	80042d4 <_svfiprintf_r+0x28>
 800447c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447e:	b01d      	add	sp, #116	; 0x74
 8004480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004484:	ab03      	add	r3, sp, #12
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	462a      	mov	r2, r5
 800448a:	4638      	mov	r0, r7
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <_svfiprintf_r+0x1fc>)
 800448e:	a904      	add	r1, sp, #16
 8004490:	f000 f87c 	bl	800458c <_printf_i>
 8004494:	e7eb      	b.n	800446e <_svfiprintf_r+0x1c2>
 8004496:	bf00      	nop
 8004498:	08004b2c 	.word	0x08004b2c
 800449c:	08004b32 	.word	0x08004b32
 80044a0:	08004b36 	.word	0x08004b36
 80044a4:	00000000 	.word	0x00000000
 80044a8:	080041f5 	.word	0x080041f5

080044ac <_printf_common>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	4616      	mov	r6, r2
 80044b2:	4699      	mov	r9, r3
 80044b4:	688a      	ldr	r2, [r1, #8]
 80044b6:	690b      	ldr	r3, [r1, #16]
 80044b8:	4607      	mov	r7, r0
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bfb8      	it	lt
 80044be:	4613      	movlt	r3, r2
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c6:	460c      	mov	r4, r1
 80044c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044cc:	b10a      	cbz	r2, 80044d2 <_printf_common+0x26>
 80044ce:	3301      	adds	r3, #1
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	0699      	lsls	r1, r3, #26
 80044d6:	bf42      	ittt	mi
 80044d8:	6833      	ldrmi	r3, [r6, #0]
 80044da:	3302      	addmi	r3, #2
 80044dc:	6033      	strmi	r3, [r6, #0]
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	f015 0506 	ands.w	r5, r5, #6
 80044e4:	d106      	bne.n	80044f4 <_printf_common+0x48>
 80044e6:	f104 0a19 	add.w	sl, r4, #25
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	6832      	ldr	r2, [r6, #0]
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	42ab      	cmp	r3, r5
 80044f2:	dc28      	bgt.n	8004546 <_printf_common+0x9a>
 80044f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f8:	1e13      	subs	r3, r2, #0
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	bf18      	it	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	0692      	lsls	r2, r2, #26
 8004502:	d42d      	bmi.n	8004560 <_printf_common+0xb4>
 8004504:	4649      	mov	r1, r9
 8004506:	4638      	mov	r0, r7
 8004508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d020      	beq.n	8004554 <_printf_common+0xa8>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	68e5      	ldr	r5, [r4, #12]
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf18      	it	ne
 800451e:	2500      	movne	r5, #0
 8004520:	6832      	ldr	r2, [r6, #0]
 8004522:	f04f 0600 	mov.w	r6, #0
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	bf08      	it	eq
 800452a:	1aad      	subeq	r5, r5, r2
 800452c:	6922      	ldr	r2, [r4, #16]
 800452e:	bf08      	it	eq
 8004530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004534:	4293      	cmp	r3, r2
 8004536:	bfc4      	itt	gt
 8004538:	1a9b      	subgt	r3, r3, r2
 800453a:	18ed      	addgt	r5, r5, r3
 800453c:	341a      	adds	r4, #26
 800453e:	42b5      	cmp	r5, r6
 8004540:	d11a      	bne.n	8004578 <_printf_common+0xcc>
 8004542:	2000      	movs	r0, #0
 8004544:	e008      	b.n	8004558 <_printf_common+0xac>
 8004546:	2301      	movs	r3, #1
 8004548:	4652      	mov	r2, sl
 800454a:	4649      	mov	r1, r9
 800454c:	4638      	mov	r0, r7
 800454e:	47c0      	blx	r8
 8004550:	3001      	adds	r0, #1
 8004552:	d103      	bne.n	800455c <_printf_common+0xb0>
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	3501      	adds	r5, #1
 800455e:	e7c4      	b.n	80044ea <_printf_common+0x3e>
 8004560:	2030      	movs	r0, #48	; 0x30
 8004562:	18e1      	adds	r1, r4, r3
 8004564:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800456e:	4422      	add	r2, r4
 8004570:	3302      	adds	r3, #2
 8004572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004576:	e7c5      	b.n	8004504 <_printf_common+0x58>
 8004578:	2301      	movs	r3, #1
 800457a:	4622      	mov	r2, r4
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d0e6      	beq.n	8004554 <_printf_common+0xa8>
 8004586:	3601      	adds	r6, #1
 8004588:	e7d9      	b.n	800453e <_printf_common+0x92>
	...

0800458c <_printf_i>:
 800458c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	7e0f      	ldrb	r7, [r1, #24]
 8004592:	4691      	mov	r9, r2
 8004594:	2f78      	cmp	r7, #120	; 0x78
 8004596:	4680      	mov	r8, r0
 8004598:	460c      	mov	r4, r1
 800459a:	469a      	mov	sl, r3
 800459c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800459e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045a2:	d807      	bhi.n	80045b4 <_printf_i+0x28>
 80045a4:	2f62      	cmp	r7, #98	; 0x62
 80045a6:	d80a      	bhi.n	80045be <_printf_i+0x32>
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	f000 80d9 	beq.w	8004760 <_printf_i+0x1d4>
 80045ae:	2f58      	cmp	r7, #88	; 0x58
 80045b0:	f000 80a4 	beq.w	80046fc <_printf_i+0x170>
 80045b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045bc:	e03a      	b.n	8004634 <_printf_i+0xa8>
 80045be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045c2:	2b15      	cmp	r3, #21
 80045c4:	d8f6      	bhi.n	80045b4 <_printf_i+0x28>
 80045c6:	a101      	add	r1, pc, #4	; (adr r1, 80045cc <_printf_i+0x40>)
 80045c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004639 	.word	0x08004639
 80045d4:	080045b5 	.word	0x080045b5
 80045d8:	080045b5 	.word	0x080045b5
 80045dc:	080045b5 	.word	0x080045b5
 80045e0:	080045b5 	.word	0x080045b5
 80045e4:	08004639 	.word	0x08004639
 80045e8:	080045b5 	.word	0x080045b5
 80045ec:	080045b5 	.word	0x080045b5
 80045f0:	080045b5 	.word	0x080045b5
 80045f4:	080045b5 	.word	0x080045b5
 80045f8:	08004747 	.word	0x08004747
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004729 	.word	0x08004729
 8004604:	080045b5 	.word	0x080045b5
 8004608:	080045b5 	.word	0x080045b5
 800460c:	08004769 	.word	0x08004769
 8004610:	080045b5 	.word	0x080045b5
 8004614:	08004669 	.word	0x08004669
 8004618:	080045b5 	.word	0x080045b5
 800461c:	080045b5 	.word	0x080045b5
 8004620:	08004731 	.word	0x08004731
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	602a      	str	r2, [r5, #0]
 800462c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004634:	2301      	movs	r3, #1
 8004636:	e0a4      	b.n	8004782 <_printf_i+0x1f6>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	6829      	ldr	r1, [r5, #0]
 800463c:	0606      	lsls	r6, r0, #24
 800463e:	f101 0304 	add.w	r3, r1, #4
 8004642:	d50a      	bpl.n	800465a <_printf_i+0xce>
 8004644:	680e      	ldr	r6, [r1, #0]
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	2e00      	cmp	r6, #0
 800464a:	da03      	bge.n	8004654 <_printf_i+0xc8>
 800464c:	232d      	movs	r3, #45	; 0x2d
 800464e:	4276      	negs	r6, r6
 8004650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004654:	230a      	movs	r3, #10
 8004656:	485e      	ldr	r0, [pc, #376]	; (80047d0 <_printf_i+0x244>)
 8004658:	e019      	b.n	800468e <_printf_i+0x102>
 800465a:	680e      	ldr	r6, [r1, #0]
 800465c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	bf18      	it	ne
 8004664:	b236      	sxthne	r6, r6
 8004666:	e7ef      	b.n	8004648 <_printf_i+0xbc>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	1d19      	adds	r1, r3, #4
 800466e:	6029      	str	r1, [r5, #0]
 8004670:	0601      	lsls	r1, r0, #24
 8004672:	d501      	bpl.n	8004678 <_printf_i+0xec>
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	e002      	b.n	800467e <_printf_i+0xf2>
 8004678:	0646      	lsls	r6, r0, #25
 800467a:	d5fb      	bpl.n	8004674 <_printf_i+0xe8>
 800467c:	881e      	ldrh	r6, [r3, #0]
 800467e:	2f6f      	cmp	r7, #111	; 0x6f
 8004680:	bf0c      	ite	eq
 8004682:	2308      	moveq	r3, #8
 8004684:	230a      	movne	r3, #10
 8004686:	4852      	ldr	r0, [pc, #328]	; (80047d0 <_printf_i+0x244>)
 8004688:	2100      	movs	r1, #0
 800468a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800468e:	6865      	ldr	r5, [r4, #4]
 8004690:	2d00      	cmp	r5, #0
 8004692:	bfa8      	it	ge
 8004694:	6821      	ldrge	r1, [r4, #0]
 8004696:	60a5      	str	r5, [r4, #8]
 8004698:	bfa4      	itt	ge
 800469a:	f021 0104 	bicge.w	r1, r1, #4
 800469e:	6021      	strge	r1, [r4, #0]
 80046a0:	b90e      	cbnz	r6, 80046a6 <_printf_i+0x11a>
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	d04d      	beq.n	8004742 <_printf_i+0x1b6>
 80046a6:	4615      	mov	r5, r2
 80046a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80046ac:	fb03 6711 	mls	r7, r3, r1, r6
 80046b0:	5dc7      	ldrb	r7, [r0, r7]
 80046b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046b6:	4637      	mov	r7, r6
 80046b8:	42bb      	cmp	r3, r7
 80046ba:	460e      	mov	r6, r1
 80046bc:	d9f4      	bls.n	80046a8 <_printf_i+0x11c>
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d10b      	bne.n	80046da <_printf_i+0x14e>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	07de      	lsls	r6, r3, #31
 80046c6:	d508      	bpl.n	80046da <_printf_i+0x14e>
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	6861      	ldr	r1, [r4, #4]
 80046cc:	4299      	cmp	r1, r3
 80046ce:	bfde      	ittt	le
 80046d0:	2330      	movle	r3, #48	; 0x30
 80046d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046da:	1b52      	subs	r2, r2, r5
 80046dc:	6122      	str	r2, [r4, #16]
 80046de:	464b      	mov	r3, r9
 80046e0:	4621      	mov	r1, r4
 80046e2:	4640      	mov	r0, r8
 80046e4:	f8cd a000 	str.w	sl, [sp]
 80046e8:	aa03      	add	r2, sp, #12
 80046ea:	f7ff fedf 	bl	80044ac <_printf_common>
 80046ee:	3001      	adds	r0, #1
 80046f0:	d14c      	bne.n	800478c <_printf_i+0x200>
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295
 80046f6:	b004      	add	sp, #16
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	4834      	ldr	r0, [pc, #208]	; (80047d0 <_printf_i+0x244>)
 80046fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004702:	6829      	ldr	r1, [r5, #0]
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	f851 6b04 	ldr.w	r6, [r1], #4
 800470a:	6029      	str	r1, [r5, #0]
 800470c:	061d      	lsls	r5, r3, #24
 800470e:	d514      	bpl.n	800473a <_printf_i+0x1ae>
 8004710:	07df      	lsls	r7, r3, #31
 8004712:	bf44      	itt	mi
 8004714:	f043 0320 	orrmi.w	r3, r3, #32
 8004718:	6023      	strmi	r3, [r4, #0]
 800471a:	b91e      	cbnz	r6, 8004724 <_printf_i+0x198>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	2310      	movs	r3, #16
 8004726:	e7af      	b.n	8004688 <_printf_i+0xfc>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	f043 0320 	orr.w	r3, r3, #32
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2378      	movs	r3, #120	; 0x78
 8004732:	4828      	ldr	r0, [pc, #160]	; (80047d4 <_printf_i+0x248>)
 8004734:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004738:	e7e3      	b.n	8004702 <_printf_i+0x176>
 800473a:	0659      	lsls	r1, r3, #25
 800473c:	bf48      	it	mi
 800473e:	b2b6      	uxthmi	r6, r6
 8004740:	e7e6      	b.n	8004710 <_printf_i+0x184>
 8004742:	4615      	mov	r5, r2
 8004744:	e7bb      	b.n	80046be <_printf_i+0x132>
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	6826      	ldr	r6, [r4, #0]
 800474a:	1d18      	adds	r0, r3, #4
 800474c:	6961      	ldr	r1, [r4, #20]
 800474e:	6028      	str	r0, [r5, #0]
 8004750:	0635      	lsls	r5, r6, #24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	d501      	bpl.n	800475a <_printf_i+0x1ce>
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0x1d4>
 800475a:	0670      	lsls	r0, r6, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0x1ca>
 800475e:	8019      	strh	r1, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	4615      	mov	r5, r2
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	e7ba      	b.n	80046de <_printf_i+0x152>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	2100      	movs	r1, #0
 800476c:	1d1a      	adds	r2, r3, #4
 800476e:	602a      	str	r2, [r5, #0]
 8004770:	681d      	ldr	r5, [r3, #0]
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f82f 	bl	80047d8 <memchr>
 800477a:	b108      	cbz	r0, 8004780 <_printf_i+0x1f4>
 800477c:	1b40      	subs	r0, r0, r5
 800477e:	6060      	str	r0, [r4, #4]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800478a:	e7a8      	b.n	80046de <_printf_i+0x152>
 800478c:	462a      	mov	r2, r5
 800478e:	4649      	mov	r1, r9
 8004790:	4640      	mov	r0, r8
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	47d0      	blx	sl
 8004796:	3001      	adds	r0, #1
 8004798:	d0ab      	beq.n	80046f2 <_printf_i+0x166>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	079b      	lsls	r3, r3, #30
 800479e:	d413      	bmi.n	80047c8 <_printf_i+0x23c>
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	4298      	cmp	r0, r3
 80047a6:	bfb8      	it	lt
 80047a8:	4618      	movlt	r0, r3
 80047aa:	e7a4      	b.n	80046f6 <_printf_i+0x16a>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4632      	mov	r2, r6
 80047b0:	4649      	mov	r1, r9
 80047b2:	4640      	mov	r0, r8
 80047b4:	47d0      	blx	sl
 80047b6:	3001      	adds	r0, #1
 80047b8:	d09b      	beq.n	80046f2 <_printf_i+0x166>
 80047ba:	3501      	adds	r5, #1
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	9903      	ldr	r1, [sp, #12]
 80047c0:	1a5b      	subs	r3, r3, r1
 80047c2:	42ab      	cmp	r3, r5
 80047c4:	dcf2      	bgt.n	80047ac <_printf_i+0x220>
 80047c6:	e7eb      	b.n	80047a0 <_printf_i+0x214>
 80047c8:	2500      	movs	r5, #0
 80047ca:	f104 0619 	add.w	r6, r4, #25
 80047ce:	e7f5      	b.n	80047bc <_printf_i+0x230>
 80047d0:	08004b3d 	.word	0x08004b3d
 80047d4:	08004b4e 	.word	0x08004b4e

080047d8 <memchr>:
 80047d8:	4603      	mov	r3, r0
 80047da:	b510      	push	{r4, lr}
 80047dc:	b2c9      	uxtb	r1, r1
 80047de:	4402      	add	r2, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	d101      	bne.n	80047ea <memchr+0x12>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e003      	b.n	80047f2 <memchr+0x1a>
 80047ea:	7804      	ldrb	r4, [r0, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	428c      	cmp	r4, r1
 80047f0:	d1f6      	bne.n	80047e0 <memchr+0x8>
 80047f2:	bd10      	pop	{r4, pc}

080047f4 <memcpy>:
 80047f4:	440a      	add	r2, r1
 80047f6:	4291      	cmp	r1, r2
 80047f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047fc:	d100      	bne.n	8004800 <memcpy+0xc>
 80047fe:	4770      	bx	lr
 8004800:	b510      	push	{r4, lr}
 8004802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004806:	4291      	cmp	r1, r2
 8004808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480c:	d1f9      	bne.n	8004802 <memcpy+0xe>
 800480e:	bd10      	pop	{r4, pc}

08004810 <memmove>:
 8004810:	4288      	cmp	r0, r1
 8004812:	b510      	push	{r4, lr}
 8004814:	eb01 0402 	add.w	r4, r1, r2
 8004818:	d902      	bls.n	8004820 <memmove+0x10>
 800481a:	4284      	cmp	r4, r0
 800481c:	4623      	mov	r3, r4
 800481e:	d807      	bhi.n	8004830 <memmove+0x20>
 8004820:	1e43      	subs	r3, r0, #1
 8004822:	42a1      	cmp	r1, r4
 8004824:	d008      	beq.n	8004838 <memmove+0x28>
 8004826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800482a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800482e:	e7f8      	b.n	8004822 <memmove+0x12>
 8004830:	4601      	mov	r1, r0
 8004832:	4402      	add	r2, r0
 8004834:	428a      	cmp	r2, r1
 8004836:	d100      	bne.n	800483a <memmove+0x2a>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004842:	e7f7      	b.n	8004834 <memmove+0x24>

08004844 <_free_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4605      	mov	r5, r0
 8004848:	2900      	cmp	r1, #0
 800484a:	d040      	beq.n	80048ce <_free_r+0x8a>
 800484c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004850:	1f0c      	subs	r4, r1, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfb8      	it	lt
 8004856:	18e4      	addlt	r4, r4, r3
 8004858:	f000 f910 	bl	8004a7c <__malloc_lock>
 800485c:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <_free_r+0x8c>)
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	b933      	cbnz	r3, 8004870 <_free_r+0x2c>
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	6014      	str	r4, [r2, #0]
 8004866:	4628      	mov	r0, r5
 8004868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800486c:	f000 b90c 	b.w	8004a88 <__malloc_unlock>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d908      	bls.n	8004886 <_free_r+0x42>
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	1821      	adds	r1, r4, r0
 8004878:	428b      	cmp	r3, r1
 800487a:	bf01      	itttt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	1809      	addeq	r1, r1, r0
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	e7ed      	b.n	8004862 <_free_r+0x1e>
 8004886:	461a      	mov	r2, r3
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	b10b      	cbz	r3, 8004890 <_free_r+0x4c>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d9fa      	bls.n	8004886 <_free_r+0x42>
 8004890:	6811      	ldr	r1, [r2, #0]
 8004892:	1850      	adds	r0, r2, r1
 8004894:	42a0      	cmp	r0, r4
 8004896:	d10b      	bne.n	80048b0 <_free_r+0x6c>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	4401      	add	r1, r0
 800489c:	1850      	adds	r0, r2, r1
 800489e:	4283      	cmp	r3, r0
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	d1e0      	bne.n	8004866 <_free_r+0x22>
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4401      	add	r1, r0
 80048aa:	6011      	str	r1, [r2, #0]
 80048ac:	6053      	str	r3, [r2, #4]
 80048ae:	e7da      	b.n	8004866 <_free_r+0x22>
 80048b0:	d902      	bls.n	80048b8 <_free_r+0x74>
 80048b2:	230c      	movs	r3, #12
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	e7d6      	b.n	8004866 <_free_r+0x22>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	1821      	adds	r1, r4, r0
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf01      	itttt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	1809      	addeq	r1, r1, r0
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	6054      	str	r4, [r2, #4]
 80048cc:	e7cb      	b.n	8004866 <_free_r+0x22>
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	20000158 	.word	0x20000158

080048d4 <sbrk_aligned>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	4e0e      	ldr	r6, [pc, #56]	; (8004910 <sbrk_aligned+0x3c>)
 80048d8:	460c      	mov	r4, r1
 80048da:	6831      	ldr	r1, [r6, #0]
 80048dc:	4605      	mov	r5, r0
 80048de:	b911      	cbnz	r1, 80048e6 <sbrk_aligned+0x12>
 80048e0:	f000 f8bc 	bl	8004a5c <_sbrk_r>
 80048e4:	6030      	str	r0, [r6, #0]
 80048e6:	4621      	mov	r1, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	f000 f8b7 	bl	8004a5c <_sbrk_r>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	d00a      	beq.n	8004908 <sbrk_aligned+0x34>
 80048f2:	1cc4      	adds	r4, r0, #3
 80048f4:	f024 0403 	bic.w	r4, r4, #3
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d007      	beq.n	800490c <sbrk_aligned+0x38>
 80048fc:	1a21      	subs	r1, r4, r0
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f8ac 	bl	8004a5c <_sbrk_r>
 8004904:	3001      	adds	r0, #1
 8004906:	d101      	bne.n	800490c <sbrk_aligned+0x38>
 8004908:	f04f 34ff 	mov.w	r4, #4294967295
 800490c:	4620      	mov	r0, r4
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	2000015c 	.word	0x2000015c

08004914 <_malloc_r>:
 8004914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004918:	1ccd      	adds	r5, r1, #3
 800491a:	f025 0503 	bic.w	r5, r5, #3
 800491e:	3508      	adds	r5, #8
 8004920:	2d0c      	cmp	r5, #12
 8004922:	bf38      	it	cc
 8004924:	250c      	movcc	r5, #12
 8004926:	2d00      	cmp	r5, #0
 8004928:	4607      	mov	r7, r0
 800492a:	db01      	blt.n	8004930 <_malloc_r+0x1c>
 800492c:	42a9      	cmp	r1, r5
 800492e:	d905      	bls.n	800493c <_malloc_r+0x28>
 8004930:	230c      	movs	r3, #12
 8004932:	2600      	movs	r6, #0
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4630      	mov	r0, r6
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493c:	4e2e      	ldr	r6, [pc, #184]	; (80049f8 <_malloc_r+0xe4>)
 800493e:	f000 f89d 	bl	8004a7c <__malloc_lock>
 8004942:	6833      	ldr	r3, [r6, #0]
 8004944:	461c      	mov	r4, r3
 8004946:	bb34      	cbnz	r4, 8004996 <_malloc_r+0x82>
 8004948:	4629      	mov	r1, r5
 800494a:	4638      	mov	r0, r7
 800494c:	f7ff ffc2 	bl	80048d4 <sbrk_aligned>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	4604      	mov	r4, r0
 8004954:	d14d      	bne.n	80049f2 <_malloc_r+0xde>
 8004956:	6834      	ldr	r4, [r6, #0]
 8004958:	4626      	mov	r6, r4
 800495a:	2e00      	cmp	r6, #0
 800495c:	d140      	bne.n	80049e0 <_malloc_r+0xcc>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4631      	mov	r1, r6
 8004962:	4638      	mov	r0, r7
 8004964:	eb04 0803 	add.w	r8, r4, r3
 8004968:	f000 f878 	bl	8004a5c <_sbrk_r>
 800496c:	4580      	cmp	r8, r0
 800496e:	d13a      	bne.n	80049e6 <_malloc_r+0xd2>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	3503      	adds	r5, #3
 8004974:	1a6d      	subs	r5, r5, r1
 8004976:	f025 0503 	bic.w	r5, r5, #3
 800497a:	3508      	adds	r5, #8
 800497c:	2d0c      	cmp	r5, #12
 800497e:	bf38      	it	cc
 8004980:	250c      	movcc	r5, #12
 8004982:	4638      	mov	r0, r7
 8004984:	4629      	mov	r1, r5
 8004986:	f7ff ffa5 	bl	80048d4 <sbrk_aligned>
 800498a:	3001      	adds	r0, #1
 800498c:	d02b      	beq.n	80049e6 <_malloc_r+0xd2>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	442b      	add	r3, r5
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	e00e      	b.n	80049b4 <_malloc_r+0xa0>
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	1b52      	subs	r2, r2, r5
 800499a:	d41e      	bmi.n	80049da <_malloc_r+0xc6>
 800499c:	2a0b      	cmp	r2, #11
 800499e:	d916      	bls.n	80049ce <_malloc_r+0xba>
 80049a0:	1961      	adds	r1, r4, r5
 80049a2:	42a3      	cmp	r3, r4
 80049a4:	6025      	str	r5, [r4, #0]
 80049a6:	bf18      	it	ne
 80049a8:	6059      	strne	r1, [r3, #4]
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	bf08      	it	eq
 80049ae:	6031      	streq	r1, [r6, #0]
 80049b0:	5162      	str	r2, [r4, r5]
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4638      	mov	r0, r7
 80049b6:	f104 060b 	add.w	r6, r4, #11
 80049ba:	f000 f865 	bl	8004a88 <__malloc_unlock>
 80049be:	f026 0607 	bic.w	r6, r6, #7
 80049c2:	1d23      	adds	r3, r4, #4
 80049c4:	1af2      	subs	r2, r6, r3
 80049c6:	d0b6      	beq.n	8004936 <_malloc_r+0x22>
 80049c8:	1b9b      	subs	r3, r3, r6
 80049ca:	50a3      	str	r3, [r4, r2]
 80049cc:	e7b3      	b.n	8004936 <_malloc_r+0x22>
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	bf0c      	ite	eq
 80049d4:	6032      	streq	r2, [r6, #0]
 80049d6:	605a      	strne	r2, [r3, #4]
 80049d8:	e7ec      	b.n	80049b4 <_malloc_r+0xa0>
 80049da:	4623      	mov	r3, r4
 80049dc:	6864      	ldr	r4, [r4, #4]
 80049de:	e7b2      	b.n	8004946 <_malloc_r+0x32>
 80049e0:	4634      	mov	r4, r6
 80049e2:	6876      	ldr	r6, [r6, #4]
 80049e4:	e7b9      	b.n	800495a <_malloc_r+0x46>
 80049e6:	230c      	movs	r3, #12
 80049e8:	4638      	mov	r0, r7
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f000 f84c 	bl	8004a88 <__malloc_unlock>
 80049f0:	e7a1      	b.n	8004936 <_malloc_r+0x22>
 80049f2:	6025      	str	r5, [r4, #0]
 80049f4:	e7de      	b.n	80049b4 <_malloc_r+0xa0>
 80049f6:	bf00      	nop
 80049f8:	20000158 	.word	0x20000158

080049fc <_realloc_r>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	4680      	mov	r8, r0
 8004a02:	4614      	mov	r4, r2
 8004a04:	460e      	mov	r6, r1
 8004a06:	b921      	cbnz	r1, 8004a12 <_realloc_r+0x16>
 8004a08:	4611      	mov	r1, r2
 8004a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	f7ff bf81 	b.w	8004914 <_malloc_r>
 8004a12:	b92a      	cbnz	r2, 8004a20 <_realloc_r+0x24>
 8004a14:	f7ff ff16 	bl	8004844 <_free_r>
 8004a18:	4625      	mov	r5, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a20:	f000 f838 	bl	8004a94 <_malloc_usable_size_r>
 8004a24:	4284      	cmp	r4, r0
 8004a26:	4607      	mov	r7, r0
 8004a28:	d802      	bhi.n	8004a30 <_realloc_r+0x34>
 8004a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a2e:	d812      	bhi.n	8004a56 <_realloc_r+0x5a>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff ff6e 	bl	8004914 <_malloc_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0ed      	beq.n	8004a1a <_realloc_r+0x1e>
 8004a3e:	42bc      	cmp	r4, r7
 8004a40:	4622      	mov	r2, r4
 8004a42:	4631      	mov	r1, r6
 8004a44:	bf28      	it	cs
 8004a46:	463a      	movcs	r2, r7
 8004a48:	f7ff fed4 	bl	80047f4 <memcpy>
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff fef8 	bl	8004844 <_free_r>
 8004a54:	e7e1      	b.n	8004a1a <_realloc_r+0x1e>
 8004a56:	4635      	mov	r5, r6
 8004a58:	e7df      	b.n	8004a1a <_realloc_r+0x1e>
	...

08004a5c <_sbrk_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4d05      	ldr	r5, [pc, #20]	; (8004a78 <_sbrk_r+0x1c>)
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fb28 	bl	80010bc <_sbrk>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_sbrk_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_sbrk_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000160 	.word	0x20000160

08004a7c <__malloc_lock>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__malloc_lock+0x8>)
 8004a7e:	f000 b811 	b.w	8004aa4 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000164 	.word	0x20000164

08004a88 <__malloc_unlock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_unlock+0x8>)
 8004a8a:	f000 b80c 	b.w	8004aa6 <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000164 	.word	0x20000164

08004a94 <_malloc_usable_size_r>:
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f18      	subs	r0, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbc      	itt	lt
 8004a9e:	580b      	ldrlt	r3, [r1, r0]
 8004aa0:	18c0      	addlt	r0, r0, r3
 8004aa2:	4770      	bx	lr

08004aa4 <__retarget_lock_acquire_recursive>:
 8004aa4:	4770      	bx	lr

08004aa6 <__retarget_lock_release_recursive>:
 8004aa6:	4770      	bx	lr

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
